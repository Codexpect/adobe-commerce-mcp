{
  "openapi": "3.0.0",
  "info": {
    "version": "2.4.8",
    "title": "Commerce Admin REST endpoints - Orders Only",
    "description": "Order-related endpoints and schemas from Adobe Commerce REST API"
  },
  "tags": [
    {
      "name": "carts/{cartId}/order"
    },
    {
      "name": "carts/mine/order"
    },
    {
      "name": "carts/mine/payment-order"
    },
    {
      "name": "carts/mine/payment-order/{id}"
    },
    {
      "name": "guest-carts/{cartId}/order"
    },
    {
      "name": "guest-carts/{cartId}/payment-order"
    },
    {
      "name": "guest-carts/{cartId}/payment-order/{id}"
    },
    {
      "name": "inventory/dump-stock-index-data/{salesChannelType}/{salesChannelCode}"
    },
    {
      "name": "inventory/export-stock-salable-qty/{salesChannelType}/{salesChannelCode}"
    },
    {
      "name": "inventory/get-sources-assigned-to-stock-ordered-by-priority/{stockId}"
    },
    {
      "name": "order/{orderId}/invoice"
    },
    {
      "name": "order/{orderId}/refund"
    },
    {
      "name": "order/{orderId}/ship"
    },
    {
      "name": "order/notify-orders-are-ready-for-pickup"
    },
    {
      "name": "orders"
    },
    {
      "name": "orders/{id}"
    },
    {
      "name": "orders/{id}/cancel"
    },
    {
      "name": "orders/{id}/comments"
    },
    {
      "name": "orders/{id}/emails"
    },
    {
      "name": "orders/{id}/hold"
    },
    {
      "name": "orders/{id}/statuses"
    },
    {
      "name": "orders/{id}/unhold"
    },
    {
      "name": "orders/{parent_id}"
    },
    {
      "name": "orders/create"
    },
    {
      "name": "orders/items"
    },
    {
      "name": "orders/items/{id}"
    },
    {
      "name": "purchase-order-carts/{cartId}/billing-address"
    },
    {
      "name": "purchase-order-carts/{cartId}/estimate-shipping-methods"
    },
    {
      "name": "purchase-order-carts/{cartId}/estimate-shipping-methods-by-address-id"
    },
    {
      "name": "purchase-order-carts/{cartId}/giftCards"
    },
    {
      "name": "purchase-order-carts/{cartId}/giftCards/{giftCardCode}"
    },
    {
      "name": "purchase-order-carts/{cartId}/payment-information"
    },
    {
      "name": "purchase-order-carts/{cartId}/set-payment-information"
    },
    {
      "name": "purchase-order-carts/{cartId}/totals"
    },
    {
      "name": "salesRules"
    },
    {
      "name": "salesRules/{ruleId}"
    },
    {
      "name": "salesRules/search"
    }
  ],
  "paths": {
    "/V1/carts/mine/order": {
      "put": {
        "tags": [
          "carts/mine/order"
        ],
        "description": "Places an order for a specified cart.",
        "operationId": "PutV1CartsMineOrder",
        "requestBody": {
          "$ref": "#/components/requestBodies/PutV1CartsMineOrderPutv1cartsmineorderbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/mine/order"
      }
    },
    "/V1/carts/mine/payment-order": {
      "post": {
        "tags": [
          "carts/mine/payment-order"
        ],
        "description": "Create a payment order for logged in customer",
        "operationId": "PostV1CartsMinePaymentorder",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsMinePaymentorderPostv1cartsminepaymentorderbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/mine/payment-order"
      }
    },
    "/V1/carts/mine/payment-order/{id}": {
      "get": {
        "tags": [
          "carts/mine/payment-order/{id}"
        ],
        "description": "Get payment order for logged in customer",
        "operationId": "GetV1CartsMinePaymentorderId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-details-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-details-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/mine/payment-order/{id}"
      },
      "post": {
        "tags": [
          "carts/mine/payment-order/{id}"
        ],
        "description": "Sync payment order for logged in customer",
        "operationId": "PostV1CartsMinePaymentorderId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/mine/payment-order/{id}"
      }
    },
    "/V1/carts/{cartId}/order": {
      "put": {
        "tags": [
          "carts/{cartId}/order"
        ],
        "description": "Places an order for a specified cart.",
        "operationId": "PutV1CartsCartIdOrder",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PutV1CartsMineOrderPutv1cartsmineorderbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/{cartId}/order"
      }
    },
    "/V1/guest-carts/{cartId}/order": {
      "put": {
        "tags": [
          "guest-carts/{cartId}/order"
        ],
        "description": "Place an order for a specified cart.",
        "operationId": "PutV1GuestcartsCartIdOrder",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PutV1CartsMineOrderPutv1cartsmineorderbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/order"
      }
    },
    "/V1/guest-carts/{cartId}/payment-order": {
      "post": {
        "tags": [
          "guest-carts/{cartId}/payment-order"
        ],
        "description": "Create a payment order for guest customer",
        "operationId": "PostV1GuestcartsCartIdPaymentorder",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsMinePaymentorderPostv1cartsminepaymentorderbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-order"
      }
    },
    "/V1/guest-carts/{cartId}/payment-order/{id}": {
      "get": {
        "tags": [
          "guest-carts/{cartId}/payment-order/{id}"
        ],
        "description": "Get payment order for guest customer",
        "operationId": "GetV1GuestcartsCartIdPaymentorderId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-details-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-details-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-order/{id}"
      },
      "post": {
        "tags": [
          "guest-carts/{cartId}/payment-order/{id}"
        ],
        "description": "Sync payment order for guest customer",
        "operationId": "PostV1GuestcartsCartIdPaymentorderId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-order/{id}"
      }
    },
    "/V1/inventory/dump-stock-index-data/{salesChannelType}/{salesChannelCode}": {
      "get": {
        "tags": [
          "inventory/dump-stock-index-data/{salesChannelType}/{salesChannelCode}"
        ],
        "description": "Provides stock index export from inventory_stock_% table",
        "operationId": "GetV1InventoryDumpstockindexdataSalesChannelTypeSalesChannelCode",
        "parameters": [
          {
            "name": "salesChannelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "salesChannelCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inventory-export-stock-api-data-product-stock-index-data-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inventory-export-stock-api-data-product-stock-index-data-interface"
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "inventory/dump-stock-index-data/{salesChannelType}/{salesChannelCode}"
      }
    },
    "/V1/inventory/export-stock-salable-qty/{salesChannelType}/{salesChannelCode}": {
      "get": {
        "tags": [
          "inventory/export-stock-salable-qty/{salesChannelType}/{salesChannelCode}"
        ],
        "description": "Export product stock data filtered by search criteria.",
        "operationId": "GetV1InventoryExportstocksalableqtySalesChannelTypeSalesChannelCode",
        "parameters": [
          {
            "name": "salesChannelType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "salesChannelCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "description": "Field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "description": "Value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "description": "Condition type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "description": "Sorting field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "description": "Sorting direction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "description": "Page size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "description": "Current page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory-export-stock-api-data-export-stock-salable-qty-search-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/inventory-export-stock-api-data-export-stock-salable-qty-search-result-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "inventory/export-stock-salable-qty/{salesChannelType}/{salesChannelCode}"
      }
    },
    "/V1/inventory/get-sources-assigned-to-stock-ordered-by-priority/{stockId}": {
      "get": {
        "tags": [
          "inventory/get-sources-assigned-to-stock-ordered-by-priority/{stockId}"
        ],
        "description": "Get Sources assigned to Stock ordered by priority If Stock with given id doesn't exist then return an empty array",
        "operationId": "GetV1InventoryGetsourcesassignedtostockorderedbypriorityStockId",
        "parameters": [
          {
            "name": "stockId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inventory-api-data-source-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inventory-api-data-source-interface"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "inventory/get-sources-assigned-to-stock-ordered-by-priority/{stockId}"
      }
    },
    "/V1/order/notify-orders-are-ready-for-pickup": {
      "post": {
        "tags": [
          "order/notify-orders-are-ready-for-pickup"
        ],
        "description": "Notify customer that the orders is ready for pickup.",
        "operationId": "PostV1OrderNotifyordersarereadyforpickup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "orderIds"
                ],
                "properties": {
                  "orderIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": [
                  "orderIds"
                ],
                "properties": {
                  "orderIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory-in-store-pickup-sales-api-data-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/inventory-in-store-pickup-sales-api-data-result-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "order/notify-orders-are-ready-for-pickup"
      }
    },
    "/V1/order/{orderId}/invoice": {
      "post": {
        "tags": [
          "order/{orderId}/invoice"
        ],
        "description": "",
        "operationId": "PostV1OrderOrderIdInvoice",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "capture": {
                    "type": "boolean"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-invoice-item-creation-interface"
                    }
                  },
                  "notify": {
                    "type": "boolean"
                  },
                  "appendComment": {
                    "type": "boolean"
                  },
                  "comment": {
                    "$ref": "#/components/schemas/sales-data-invoice-comment-creation-interface"
                  },
                  "arguments": {
                    "$ref": "#/components/schemas/sales-data-invoice-creation-arguments-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "properties": {
                  "capture": {
                    "type": "boolean"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-invoice-item-creation-interface"
                    }
                  },
                  "notify": {
                    "type": "boolean"
                  },
                  "appendComment": {
                    "type": "boolean"
                  },
                  "comment": {
                    "$ref": "#/components/schemas/sales-data-invoice-comment-creation-interface"
                  },
                  "arguments": {
                    "$ref": "#/components/schemas/sales-data-invoice-creation-arguments-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "order/{orderId}/invoice"
      }
    },
    "/V1/order/{orderId}/refund": {
      "post": {
        "tags": [
          "order/{orderId}/refund"
        ],
        "description": "Create offline refund for order",
        "operationId": "PostV1OrderOrderIdRefund",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-creditmemo-item-creation-interface"
                    }
                  },
                  "notify": {
                    "type": "boolean"
                  },
                  "appendComment": {
                    "type": "boolean"
                  },
                  "comment": {
                    "$ref": "#/components/schemas/sales-data-creditmemo-comment-creation-interface"
                  },
                  "arguments": {
                    "$ref": "#/components/schemas/sales-data-creditmemo-creation-arguments-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-creditmemo-item-creation-interface"
                    }
                  },
                  "notify": {
                    "type": "boolean"
                  },
                  "appendComment": {
                    "type": "boolean"
                  },
                  "comment": {
                    "$ref": "#/components/schemas/sales-data-creditmemo-comment-creation-interface"
                  },
                  "arguments": {
                    "$ref": "#/components/schemas/sales-data-creditmemo-creation-arguments-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "order/{orderId}/refund"
      }
    },
    "/V1/order/{orderId}/ship": {
      "post": {
        "tags": [
          "order/{orderId}/ship"
        ],
        "description": "Creates new Shipment for given Order.",
        "operationId": "PostV1OrderOrderIdShip",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-shipment-item-creation-interface"
                    }
                  },
                  "notify": {
                    "type": "boolean"
                  },
                  "appendComment": {
                    "type": "boolean"
                  },
                  "comment": {
                    "$ref": "#/components/schemas/sales-data-shipment-comment-creation-interface"
                  },
                  "tracks": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-shipment-track-creation-interface"
                    }
                  },
                  "packages": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-shipment-package-creation-interface"
                    }
                  },
                  "arguments": {
                    "$ref": "#/components/schemas/sales-data-shipment-creation-arguments-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-shipment-item-creation-interface"
                    }
                  },
                  "notify": {
                    "type": "boolean"
                  },
                  "appendComment": {
                    "type": "boolean"
                  },
                  "comment": {
                    "$ref": "#/components/schemas/sales-data-shipment-comment-creation-interface"
                  },
                  "tracks": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-shipment-track-creation-interface"
                    }
                  },
                  "packages": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/sales-data-shipment-package-creation-interface"
                    }
                  },
                  "arguments": {
                    "$ref": "#/components/schemas/sales-data-shipment-creation-arguments-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Id of created Shipment."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Id of created Shipment."
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "order/{orderId}/ship"
      }
    },
    "/V1/orders": {
      "get": {
        "tags": [
          "orders"
        ],
        "description": "Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://developer.adobe.com/commerce/webapi/rest/attributes#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "GetV1Orders",
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "description": "Field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "description": "Value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "description": "Condition type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "description": "Sorting field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "description": "Sorting direction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "description": "Page size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "description": "Current page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-search-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-search-result-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders"
      },
      "post": {
        "tags": [
          "orders"
        ],
        "description": "Performs persist operations for a specified order.",
        "operationId": "PostV1Orders",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1OrdersPostv1ordersbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders"
      }
    },
    "/V1/orders/create": {
      "put": {
        "tags": [
          "orders/create"
        ],
        "description": "Performs persist operations for a specified order.",
        "operationId": "PutV1OrdersCreate",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1OrdersPostv1ordersbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/create"
      }
    },
    "/V1/orders/items": {
      "get": {
        "tags": [
          "orders/items"
        ],
        "description": "Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://developer.adobe.com/commerce/webapi/rest/attributes#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "GetV1OrdersItems",
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "description": "Field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "description": "Value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "description": "Condition type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "description": "Sorting field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "description": "Sorting direction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "description": "Page size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "description": "Current page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-item-search-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-item-search-result-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/items"
      }
    },
    "/V1/orders/items/{id}": {
      "get": {
        "tags": [
          "orders/items/{id}"
        ],
        "description": "Loads a specified order item.",
        "operationId": "GetV1OrdersItemsId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order item ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-item-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-item-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/items/{id}"
      }
    },
    "/V1/orders/{id}": {
      "get": {
        "tags": [
          "orders/{id}"
        ],
        "description": "Loads a specified order.",
        "operationId": "GetV1OrdersId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}"
      }
    },
    "/V1/orders/{id}/cancel": {
      "post": {
        "tags": [
          "orders/{id}/cancel"
        ],
        "description": "Cancels a specified order.",
        "operationId": "PostV1OrdersIdCancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}/cancel"
      }
    },
    "/V1/orders/{id}/comments": {
      "post": {
        "tags": [
          "orders/{id}/comments"
        ],
        "description": "Adds a comment to a specified order.",
        "operationId": "PostV1OrdersIdComments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "statusHistory"
                ],
                "properties": {
                  "statusHistory": {
                    "$ref": "#/components/schemas/sales-data-order-status-history-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": [
                  "statusHistory"
                ],
                "properties": {
                  "statusHistory": {
                    "$ref": "#/components/schemas/sales-data-order-status-history-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}/comments"
      },
      "get": {
        "tags": [
          "orders/{id}/comments"
        ],
        "description": "Lists comments for a specified order.",
        "operationId": "GetV1OrdersIdComments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-status-history-search-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-status-history-search-result-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}/comments"
      }
    },
    "/V1/orders/{id}/emails": {
      "post": {
        "tags": [
          "orders/{id}/emails"
        ],
        "description": "Emails a user a specified order.",
        "operationId": "PostV1OrdersIdEmails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}/emails"
      }
    },
    "/V1/orders/{id}/hold": {
      "post": {
        "tags": [
          "orders/{id}/hold"
        ],
        "description": "Holds a specified order.",
        "operationId": "PostV1OrdersIdHold",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}/hold"
      }
    },
    "/V1/orders/{id}/statuses": {
      "get": {
        "tags": [
          "orders/{id}/statuses"
        ],
        "description": "Gets the status for a specified order.",
        "operationId": "GetV1OrdersIdStatuses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Order status."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "description": "Order status."
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}/statuses"
      }
    },
    "/V1/orders/{id}/unhold": {
      "post": {
        "tags": [
          "orders/{id}/unhold"
        ],
        "description": "Releases a specified order from hold status.",
        "operationId": "PostV1OrdersIdUnhold",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The order ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{id}/unhold"
      }
    },
    "/V1/orders/{parent_id}": {
      "put": {
        "tags": [
          "orders/{parent_id}"
        ],
        "description": "Performs persist operations for a specified order address.",
        "operationId": "PutV1OrdersParent_id",
        "parameters": [
          {
            "name": "parent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "entity"
                ],
                "properties": {
                  "entity": {
                    "$ref": "#/components/schemas/sales-data-order-address-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": [
                  "entity"
                ],
                "properties": {
                  "entity": {
                    "$ref": "#/components/schemas/sales-data-order-address-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-address-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-data-order-address-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "orders/{parent_id}"
      }
    },
    "/V1/purchase-order-carts/{cartId}/billing-address": {
      "post": {
        "tags": [
          "purchase-order-carts/{cartId}/billing-address"
        ],
        "description": "Assigns a specified billing address to a specified cart.",
        "operationId": "PostV1PurchaseordercartsCartIdBillingaddress",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsMineBillingaddressPostv1cartsminebillingaddressbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Address ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Address ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/billing-address"
      }
    },
    "/V1/purchase-order-carts/{cartId}/estimate-shipping-methods": {
      "post": {
        "tags": [
          "purchase-order-carts/{cartId}/estimate-shipping-methods"
        ],
        "description": "Estimate shipping by address and return list of available shipping methods",
        "operationId": "PostV1PurchaseordercartsCartIdEstimateshippingmethods",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsMineEstimateshippingmethodsPostv1cartsmineestimateshippingmethodsbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/estimate-shipping-methods"
      }
    },
    "/V1/purchase-order-carts/{cartId}/estimate-shipping-methods-by-address-id": {
      "post": {
        "tags": [
          "purchase-order-carts/{cartId}/estimate-shipping-methods-by-address-id"
        ],
        "description": "Estimate shipping",
        "operationId": "PostV1PurchaseordercartsCartIdEstimateshippingmethodsbyaddressid",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The shopping cart ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsMineEstimateshippingmethodsbyaddressidPostv1cartsmineestimateshippingmethodsbyaddressidbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/estimate-shipping-methods-by-address-id"
      }
    },
    "/V1/purchase-order-carts/{cartId}/giftCards": {
      "post": {
        "tags": [
          "purchase-order-carts/{cartId}/giftCards"
        ],
        "description": "Add gift card to the cart.",
        "operationId": "PostV1PurchaseordercartsCartIdGiftCards",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsGuestcartsCartIdGiftCardsPostv1cartsguestcartscartidgiftcardsbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/giftCards"
      }
    },
    "/V1/purchase-order-carts/{cartId}/giftCards/{giftCardCode}": {
      "delete": {
        "tags": [
          "purchase-order-carts/{cartId}/giftCards/{giftCardCode}"
        ],
        "description": "Remove GiftCard Account entity",
        "operationId": "DeleteV1PurchaseordercartsCartIdGiftCardsGiftCardCode",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "giftCardCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/giftCards/{giftCardCode}"
      }
    },
    "/V1/purchase-order-carts/{cartId}/payment-information": {
      "post": {
        "tags": [
          "purchase-order-carts/{cartId}/payment-information"
        ],
        "description": "Set payment information and place order for a specified cart.",
        "operationId": "PostV1PurchaseordercartsCartIdPaymentinformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsMinePaymentinformationPostv1cartsminepaymentinformationbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/payment-information"
      },
      "get": {
        "tags": [
          "purchase-order-carts/{cartId}/payment-information"
        ],
        "description": "Get payment information",
        "operationId": "GetV1PurchaseordercartsCartIdPaymentinformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkout-data-payment-details-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/checkout-data-payment-details-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/payment-information"
      }
    },
    "/V1/purchase-order-carts/{cartId}/set-payment-information": {
      "post": {
        "tags": [
          "purchase-order-carts/{cartId}/set-payment-information"
        ],
        "description": "Set payment information for a specified cart.",
        "operationId": "PostV1PurchaseordercartsCartIdSetpaymentinformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1CartsMinePaymentinformationPostv1cartsminepaymentinformationbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/set-payment-information"
      }
    },
    "/V1/purchase-order-carts/{cartId}/totals": {
      "get": {
        "tags": [
          "purchase-order-carts/{cartId}/totals"
        ],
        "description": "Returns quote totals data for a specified cart.",
        "operationId": "GetV1PurchaseordercartsCartIdTotals",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "purchase-order-carts/{cartId}/totals"
      }
    },
    "/V1/salesRules": {
      "post": {
        "tags": [
          "salesRules"
        ],
        "description": "Save sales rule.",
        "operationId": "PostV1SalesRules",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1SalesRulesPostv1salesrulesbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "salesRules"
      }
    },
    "/V1/salesRules/search": {
      "get": {
        "tags": [
          "salesRules/search"
        ],
        "description": "Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://developer.adobe.com/commerce/webapi/rest/attributes#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "GetV1SalesRulesSearch",
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "description": "Field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "description": "Value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "description": "Condition type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "description": "Sorting field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "description": "Sorting direction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "description": "Page size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "description": "Current page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-search-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-search-result-interface"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "salesRules/search"
      }
    },
    "/V1/salesRules/{ruleId}": {
      "get": {
        "tags": [
          "salesRules/{ruleId}"
        ],
        "description": "Get rule by ID.",
        "operationId": "GetV1SalesRulesRuleId",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "salesRules/{ruleId}"
      },
      "put": {
        "tags": [
          "salesRules/{ruleId}"
        ],
        "description": "Save sales rule.",
        "operationId": "PutV1SalesRulesRuleId",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1SalesRulesPostv1salesrulesbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "salesRules/{ruleId}"
      },
      "delete": {
        "tags": [
          "salesRules/{ruleId}"
        ],
        "description": "Delete rule by ID.",
        "operationId": "DeleteV1SalesRulesRuleId",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "true on success"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean",
                  "description": "true on success"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "salesRules/{ruleId}"
      }
    }
  },
  "components": {
    "requestBodies": {
      "PostV1OrdersPostv1ordersbody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/components/schemas/sales-data-order-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1SalesRulesPostv1salesrulesbody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "rule"
              ],
              "properties": {
                "rule": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": [
                "rule"
              ],
              "properties": {
                "rule": {
                  "$ref": "#/components/schemas/sales-rule-data-rule-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1CouponsPostv1couponsbody": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "coupon"
              ],
              "properties": {
                "coupon": {
                  "$ref": "#/components/schemas/sales-rule-data-coupon-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": [
                "coupon"
              ],
              "properties": {
                "coupon": {
                  "$ref": "#/components/schemas/sales-rule-data-coupon-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "error-response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "errors": {
            "$ref": "#/components/schemas/error-errors"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "parameters": {
            "$ref": "#/components/schemas/error-parameters"
          },
          "trace": {
            "type": "string",
            "description": "Stack trace"
          }
        },
        "required": [
          "message"
        ]
      },
      "framework-sort-order": {
        "type": "object",
        "description": "Data object for sort order.",
        "properties": {
          "field": {
            "type": "string",
            "description": "Sorting field."
          },
          "direction": {
            "type": "string",
            "description": "Sorting direction."
          }
        },
        "required": [
          "field",
          "direction"
        ]
      },
      "sales-rule-data-rule-discount-interface": {
        "type": "object",
        "description": "Rule discount Interface",
        "properties": {
          "discount_data": {
            "$ref": "#/components/schemas/sales-rule-data-discount-data-interface"
          },
          "rule_label": {
            "type": "string",
            "description": "Rule Label"
          },
          "rule_i_d": {
            "type": "integer",
            "description": "Rule ID"
          }
        },
        "required": [
          "discount_data",
          "rule_label",
          "rule_i_d"
        ]
      },
      "sales-rule-data-discount-data-interface": {
        "type": "object",
        "description": "Discount Data Interface",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount"
          },
          "base_amount": {
            "type": "number",
            "description": "Base Amount"
          },
          "original_amount": {
            "type": "number",
            "description": "Original Amount"
          },
          "base_original_amount": {
            "type": "number",
            "description": "Base Original Amount"
          }
        },
        "required": [
          "amount",
          "base_amount",
          "original_amount",
          "base_original_amount"
        ]
      },
      "quote-data-totals-interface": {
        "type": "object",
        "description": "Interface TotalsInterface",
        "properties": {
          "grand_total": {
            "type": "number",
            "description": "Grand total in quote currency"
          },
          "base_grand_total": {
            "type": "number",
            "description": "Grand total in base currency"
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal in quote currency"
          },
          "base_subtotal": {
            "type": "number",
            "description": "Subtotal in base currency"
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount in quote currency"
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Discount amount in base currency"
          },
          "subtotal_with_discount": {
            "type": "number",
            "description": "Subtotal in quote currency with applied discount"
          },
          "base_subtotal_with_discount": {
            "type": "number",
            "description": "Subtotal in base currency with applied discount"
          },
          "shipping_amount": {
            "type": "number",
            "description": "Shipping amount in quote currency"
          },
          "base_shipping_amount": {
            "type": "number",
            "description": "Shipping amount in base currency"
          },
          "shipping_discount_amount": {
            "type": "number",
            "description": "Shipping discount amount in quote currency"
          },
          "base_shipping_discount_amount": {
            "type": "number",
            "description": "Shipping discount amount in base currency"
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount in quote currency"
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Tax amount in base currency"
          },
          "weee_tax_applied_amount": {
            "type": "number",
            "description": "Item weee tax applied amount in quote currency."
          },
          "shipping_tax_amount": {
            "type": "number",
            "description": "Shipping tax amount in quote currency"
          },
          "base_shipping_tax_amount": {
            "type": "number",
            "description": "Shipping tax amount in base currency"
          },
          "subtotal_incl_tax": {
            "type": "number",
            "description": "Subtotal including tax in quote currency"
          },
          "base_subtotal_incl_tax": {
            "type": "number",
            "description": "Subtotal including tax in base currency"
          },
          "shipping_incl_tax": {
            "type": "number",
            "description": "Shipping including tax in quote currency"
          },
          "base_shipping_incl_tax": {
            "type": "number",
            "description": "Shipping including tax in base currency"
          },
          "base_currency_code": {
            "type": "string",
            "description": "Base currency code"
          },
          "quote_currency_code": {
            "type": "string",
            "description": "Quote currency code"
          },
          "coupon_code": {
            "type": "string",
            "description": "Applied coupon code"
          },
          "items_qty": {
            "type": "integer",
            "description": "Items qty"
          },
          "items": {
            "type": "array",
            "description": "Totals by items",
            "items": {
              "$ref": "#/components/schemas/quote-data-totals-item-interface"
            }
          },
          "total_segments": {
            "type": "array",
            "description": "Dynamically calculated totals",
            "items": {
              "$ref": "#/components/schemas/quote-data-total-segment-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-totals-extension-interface"
          }
        },
        "required": [
          "weee_tax_applied_amount",
          "total_segments"
        ]
      },
      "sales-data-order-interface": {
        "type": "object",
        "description": "Order interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "adjustment_negative": {
            "type": "number",
            "description": "Negative adjustment value."
          },
          "adjustment_positive": {
            "type": "number",
            "description": "Positive adjustment value."
          },
          "applied_rule_ids": {
            "type": "string",
            "description": "Applied rule IDs."
          },
          "base_adjustment_negative": {
            "type": "number",
            "description": "Base negative adjustment value."
          },
          "base_adjustment_positive": {
            "type": "number",
            "description": "Base positive adjustment value."
          },
          "base_currency_code": {
            "type": "string",
            "description": "Base currency code."
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Base discount amount."
          },
          "base_discount_canceled": {
            "type": "number",
            "description": "Base discount canceled."
          },
          "base_discount_invoiced": {
            "type": "number",
            "description": "Base discount invoiced."
          },
          "base_discount_refunded": {
            "type": "number",
            "description": "Base discount refunded."
          },
          "base_grand_total": {
            "type": "number",
            "description": "Base grand total."
          },
          "base_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Base discount tax compensation amount."
          },
          "base_discount_tax_compensation_invoiced": {
            "type": "number",
            "description": "Base discount tax compensation invoiced."
          },
          "base_discount_tax_compensation_refunded": {
            "type": "number",
            "description": "Base discount tax compensation refunded."
          },
          "base_shipping_amount": {
            "type": "number",
            "description": "Base shipping amount."
          },
          "base_shipping_canceled": {
            "type": "number",
            "description": "Base shipping canceled."
          },
          "base_shipping_discount_amount": {
            "type": "number",
            "description": "Base shipping discount amount."
          },
          "base_shipping_discount_tax_compensation_amnt": {
            "type": "number",
            "description": "Base shipping discount tax compensation amount."
          },
          "base_shipping_incl_tax": {
            "type": "number",
            "description": "Base shipping including tax."
          },
          "base_shipping_invoiced": {
            "type": "number",
            "description": "Base shipping invoiced."
          },
          "base_shipping_refunded": {
            "type": "number",
            "description": "Base shipping refunded."
          },
          "base_shipping_tax_amount": {
            "type": "number",
            "description": "Base shipping tax amount."
          },
          "base_shipping_tax_refunded": {
            "type": "number",
            "description": "Base shipping tax refunded."
          },
          "base_subtotal": {
            "type": "number",
            "description": "Base subtotal."
          },
          "base_subtotal_canceled": {
            "type": "number",
            "description": "Base subtotal canceled."
          },
          "base_subtotal_incl_tax": {
            "type": "number",
            "description": "Base subtotal including tax."
          },
          "base_subtotal_invoiced": {
            "type": "number",
            "description": "Base subtotal invoiced."
          },
          "base_subtotal_refunded": {
            "type": "number",
            "description": "Base subtotal refunded."
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Base tax amount."
          },
          "base_tax_canceled": {
            "type": "number",
            "description": "Base tax canceled."
          },
          "base_tax_invoiced": {
            "type": "number",
            "description": "Base tax invoiced."
          },
          "base_tax_refunded": {
            "type": "number",
            "description": "Base tax refunded."
          },
          "base_total_canceled": {
            "type": "number",
            "description": "Base total canceled."
          },
          "base_total_due": {
            "type": "number",
            "description": "Base total due."
          },
          "base_total_invoiced": {
            "type": "number",
            "description": "Base total invoiced."
          },
          "base_total_invoiced_cost": {
            "type": "number",
            "description": "Base total invoiced cost."
          },
          "base_total_offline_refunded": {
            "type": "number",
            "description": "Base total offline refunded."
          },
          "base_total_online_refunded": {
            "type": "number",
            "description": "Base total online refunded."
          },
          "base_total_paid": {
            "type": "number",
            "description": "Base total paid."
          },
          "base_total_qty_ordered": {
            "type": "number",
            "description": "Base total quantity ordered."
          },
          "base_total_refunded": {
            "type": "number",
            "description": "Base total refunded."
          },
          "base_to_global_rate": {
            "type": "number",
            "description": "Base-to-global rate."
          },
          "base_to_order_rate": {
            "type": "number",
            "description": "Base-to-order rate."
          },
          "billing_address_id": {
            "type": "integer",
            "description": "Billing address ID."
          },
          "can_ship_partially": {
            "type": "integer",
            "description": "Can-ship-partially flag value."
          },
          "can_ship_partially_item": {
            "type": "integer",
            "description": "Can-ship-partially-item flag value."
          },
          "coupon_code": {
            "type": "string",
            "description": "Coupon code."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "customer_dob": {
            "type": "string",
            "description": "In keeping with current security and privacy best practices, be sure you are aware of any potential legal and security risks associated with the storage of customers’ full date of birth (month, day, year) along with other personal identifiers (e.g., full name) before collecting or processing such data."
          },
          "customer_email": {
            "type": "string",
            "description": "Customer email address."
          },
          "customer_firstname": {
            "type": "string",
            "description": "Customer first name."
          },
          "customer_gender": {
            "type": "integer",
            "description": "Customer gender."
          },
          "customer_group_id": {
            "type": "integer",
            "description": "Customer group ID."
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID."
          },
          "customer_is_guest": {
            "type": "integer",
            "description": "Customer-is-guest flag value."
          },
          "customer_lastname": {
            "type": "string",
            "description": "Customer last name."
          },
          "customer_middlename": {
            "type": "string",
            "description": "Customer middle name."
          },
          "customer_note": {
            "type": "string",
            "description": "Customer note."
          },
          "customer_note_notify": {
            "type": "integer",
            "description": "Customer-note-notify flag value."
          },
          "customer_prefix": {
            "type": "string",
            "description": "Customer prefix."
          },
          "customer_suffix": {
            "type": "string",
            "description": "Customer suffix."
          },
          "customer_taxvat": {
            "type": "string",
            "description": "Customer value-added tax (VAT)."
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount."
          },
          "discount_canceled": {
            "type": "number",
            "description": "Discount canceled."
          },
          "discount_description": {
            "type": "string",
            "description": "Discount description."
          },
          "discount_invoiced": {
            "type": "number",
            "description": "Discount invoiced."
          },
          "discount_refunded": {
            "type": "number",
            "description": "Discount refunded amount."
          },
          "edit_increment": {
            "type": "integer",
            "description": "Edit increment value."
          },
          "email_sent": {
            "type": "integer",
            "description": "Email-sent flag value."
          },
          "entity_id": {
            "type": "integer",
            "description": "Order ID."
          },
          "ext_customer_id": {
            "type": "string",
            "description": "External customer ID."
          },
          "ext_order_id": {
            "type": "string",
            "description": "External order ID."
          },
          "forced_shipment_with_invoice": {
            "type": "integer",
            "description": "Forced-shipment-with-invoice flag value."
          },
          "global_currency_code": {
            "type": "string",
            "description": "Global currency code."
          },
          "grand_total": {
            "type": "number",
            "description": "Grand total."
          },
          "discount_tax_compensation_amount": {
            "type": "number",
            "description": "Discount tax compensation amount."
          },
          "discount_tax_compensation_invoiced": {
            "type": "number",
            "description": "Discount tax compensation invoiced amount."
          },
          "discount_tax_compensation_refunded": {
            "type": "number",
            "description": "Discount tax compensation refunded amount."
          },
          "hold_before_state": {
            "type": "string",
            "description": "Hold before state."
          },
          "hold_before_status": {
            "type": "string",
            "description": "Hold before status."
          },
          "increment_id": {
            "type": "string",
            "description": "Increment ID."
          },
          "is_virtual": {
            "type": "integer",
            "description": "Is-virtual flag value."
          },
          "order_currency_code": {
            "type": "string",
            "description": "Order currency code."
          },
          "original_increment_id": {
            "type": "string",
            "description": "Original increment ID."
          },
          "payment_authorization_amount": {
            "type": "number",
            "description": "Payment authorization amount."
          },
          "payment_auth_expiration": {
            "type": "integer",
            "description": "Payment authorization expiration date."
          },
          "protect_code": {
            "type": "string",
            "description": "Protect code."
          },
          "quote_address_id": {
            "type": "integer",
            "description": "Quote address ID."
          },
          "quote_id": {
            "type": "integer",
            "description": "Quote ID."
          },
          "relation_child_id": {
            "type": "string",
            "description": "Relation child ID."
          },
          "relation_child_real_id": {
            "type": "string",
            "description": "Relation child real ID."
          },
          "relation_parent_id": {
            "type": "string",
            "description": "Relation parent ID."
          },
          "relation_parent_real_id": {
            "type": "string",
            "description": "Relation parent real ID."
          },
          "remote_ip": {
            "type": "string",
            "description": "Remote IP address."
          },
          "shipping_amount": {
            "type": "number",
            "description": "Shipping amount."
          },
          "shipping_canceled": {
            "type": "number",
            "description": "Shipping canceled amount."
          },
          "shipping_description": {
            "type": "string",
            "description": "Shipping description."
          },
          "shipping_discount_amount": {
            "type": "number",
            "description": "Shipping discount amount."
          },
          "shipping_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Shipping discount tax compensation amount."
          },
          "shipping_incl_tax": {
            "type": "number",
            "description": "Shipping including tax amount."
          },
          "shipping_invoiced": {
            "type": "number",
            "description": "Shipping invoiced amount."
          },
          "shipping_refunded": {
            "type": "number",
            "description": "Shipping refunded amount."
          },
          "shipping_tax_amount": {
            "type": "number",
            "description": "Shipping tax amount."
          },
          "shipping_tax_refunded": {
            "type": "number",
            "description": "Shipping tax refunded amount."
          },
          "state": {
            "type": "string",
            "description": "State."
          },
          "status": {
            "type": "string",
            "description": "Status."
          },
          "store_currency_code": {
            "type": "string",
            "description": "Store currency code."
          },
          "store_id": {
            "type": "integer",
            "description": "Store ID."
          },
          "store_name": {
            "type": "string",
            "description": "Store name."
          },
          "store_to_base_rate": {
            "type": "number",
            "description": "Store-to-base rate."
          },
          "store_to_order_rate": {
            "type": "number",
            "description": "Store-to-order rate."
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal."
          },
          "subtotal_canceled": {
            "type": "number",
            "description": "Subtotal canceled amount."
          },
          "subtotal_incl_tax": {
            "type": "number",
            "description": "Subtotal including tax amount."
          },
          "subtotal_invoiced": {
            "type": "number",
            "description": "Subtotal invoiced amount."
          },
          "subtotal_refunded": {
            "type": "number",
            "description": "Subtotal refunded amount."
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount."
          },
          "tax_canceled": {
            "type": "number",
            "description": "Tax canceled amount."
          },
          "tax_invoiced": {
            "type": "number",
            "description": "Tax invoiced amount."
          },
          "tax_refunded": {
            "type": "number",
            "description": "Tax refunded amount."
          },
          "total_canceled": {
            "type": "number",
            "description": "Total canceled."
          },
          "total_due": {
            "type": "number",
            "description": "Total due."
          },
          "total_invoiced": {
            "type": "number",
            "description": "Total invoiced amount."
          },
          "total_item_count": {
            "type": "integer",
            "description": "Total item count."
          },
          "total_offline_refunded": {
            "type": "number",
            "description": "Total offline refunded amount."
          },
          "total_online_refunded": {
            "type": "number",
            "description": "Total online refunded amount."
          },
          "total_paid": {
            "type": "number",
            "description": "Total paid."
          },
          "total_qty_ordered": {
            "type": "number",
            "description": "Total quantity ordered."
          },
          "total_refunded": {
            "type": "number",
            "description": "Total amount refunded."
          },
          "updated_at": {
            "type": "string",
            "description": "Updated-at timestamp."
          },
          "weight": {
            "type": "number",
            "description": "Weight."
          },
          "x_forwarded_for": {
            "type": "string",
            "description": "X-Forwarded-For field value."
          },
          "items": {
            "type": "array",
            "description": "Array of items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-order-item-interface"
            }
          },
          "billing_address": {
            "$ref": "#/components/schemas/sales-data-order-address-interface"
          },
          "payment": {
            "$ref": "#/components/schemas/sales-data-order-payment-interface"
          },
          "status_histories": {
            "type": "array",
            "description": "Array of status histories.",
            "items": {
              "$ref": "#/components/schemas/sales-data-order-status-history-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-order-extension-interface"
          }
        },
        "required": [
          "base_grand_total",
          "customer_email",
          "grand_total",
          "items"
        ]
      },
      "sales-data-order-item-interface": {
        "type": "object",
        "description": "Order item interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "additional_data": {
            "type": "string",
            "description": "Additional data."
          },
          "amount_refunded": {
            "type": "number",
            "description": "Amount refunded."
          },
          "applied_rule_ids": {
            "type": "string",
            "description": "Applied rule IDs."
          },
          "base_amount_refunded": {
            "type": "number",
            "description": "Base amount refunded."
          },
          "base_cost": {
            "type": "number",
            "description": "Base cost."
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Base discount amount."
          },
          "base_discount_invoiced": {
            "type": "number",
            "description": "Base discount invoiced."
          },
          "base_discount_refunded": {
            "type": "number",
            "description": "Base discount refunded."
          },
          "base_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Base discount tax compensation amount."
          },
          "base_discount_tax_compensation_invoiced": {
            "type": "number",
            "description": "Base discount tax compensation invoiced."
          },
          "base_discount_tax_compensation_refunded": {
            "type": "number",
            "description": "Base discount tax compensation refunded."
          },
          "base_original_price": {
            "type": "number",
            "description": "Base original price."
          },
          "base_price": {
            "type": "number",
            "description": "Base price."
          },
          "base_price_incl_tax": {
            "type": "number",
            "description": "Base price including tax."
          },
          "base_row_invoiced": {
            "type": "number",
            "description": "Base row invoiced."
          },
          "base_row_total": {
            "type": "number",
            "description": "Base row total."
          },
          "base_row_total_incl_tax": {
            "type": "number",
            "description": "Base row total including tax."
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Base tax amount."
          },
          "base_tax_before_discount": {
            "type": "number",
            "description": "Base tax before discount."
          },
          "base_tax_invoiced": {
            "type": "number",
            "description": "Base tax invoiced."
          },
          "base_tax_refunded": {
            "type": "number",
            "description": "Base tax refunded."
          },
          "base_weee_tax_applied_amount": {
            "type": "number",
            "description": "Base WEEE tax applied amount."
          },
          "base_weee_tax_applied_row_amnt": {
            "type": "number",
            "description": "Base WEEE tax applied row amount."
          },
          "base_weee_tax_disposition": {
            "type": "number",
            "description": "Base WEEE tax disposition."
          },
          "base_weee_tax_row_disposition": {
            "type": "number",
            "description": "Base WEEE tax row disposition."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "description": {
            "type": "string",
            "description": "Description."
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount."
          },
          "discount_invoiced": {
            "type": "number",
            "description": "Discount invoiced."
          },
          "discount_percent": {
            "type": "number",
            "description": "Discount percent."
          },
          "discount_refunded": {
            "type": "number",
            "description": "Discount refunded."
          },
          "event_id": {
            "type": "integer",
            "description": "Event ID."
          },
          "ext_order_item_id": {
            "type": "string",
            "description": "External order item ID."
          },
          "free_shipping": {
            "type": "integer",
            "description": "Free-shipping flag value."
          },
          "gw_base_price": {
            "type": "number",
            "description": "GW base price."
          },
          "gw_base_price_invoiced": {
            "type": "number",
            "description": "GW base price invoiced."
          },
          "gw_base_price_refunded": {
            "type": "number",
            "description": "GW base price refunded."
          },
          "gw_base_tax_amount": {
            "type": "number",
            "description": "GW base tax amount."
          },
          "gw_base_tax_amount_invoiced": {
            "type": "number",
            "description": "GW base tax amount invoiced."
          },
          "gw_base_tax_amount_refunded": {
            "type": "number",
            "description": "GW base tax amount refunded."
          },
          "gw_id": {
            "type": "integer",
            "description": "GW ID."
          },
          "gw_price": {
            "type": "number",
            "description": "GW price."
          },
          "gw_price_invoiced": {
            "type": "number",
            "description": "GW price invoiced."
          },
          "gw_price_refunded": {
            "type": "number",
            "description": "GW price refunded."
          },
          "gw_tax_amount": {
            "type": "number",
            "description": "GW tax amount."
          },
          "gw_tax_amount_invoiced": {
            "type": "number",
            "description": "GW tax amount invoiced."
          },
          "gw_tax_amount_refunded": {
            "type": "number",
            "description": "GW tax amount refunded."
          },
          "discount_tax_compensation_amount": {
            "type": "number",
            "description": "Discount tax compensation amount."
          },
          "discount_tax_compensation_canceled": {
            "type": "number",
            "description": "Discount tax compensation canceled."
          },
          "discount_tax_compensation_invoiced": {
            "type": "number",
            "description": "Discount tax compensation invoiced."
          },
          "discount_tax_compensation_refunded": {
            "type": "number",
            "description": "Discount tax compensation refunded."
          },
          "is_qty_decimal": {
            "type": "integer",
            "description": "Is-quantity-decimal flag value."
          },
          "is_virtual": {
            "type": "integer",
            "description": "Is-virtual flag value."
          },
          "item_id": {
            "type": "integer",
            "description": "Item ID."
          },
          "locked_do_invoice": {
            "type": "integer",
            "description": "Locked DO invoice flag value."
          },
          "locked_do_ship": {
            "type": "integer",
            "description": "Locked DO ship flag value."
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "no_discount": {
            "type": "integer",
            "description": "No-discount flag value."
          },
          "order_id": {
            "type": "integer",
            "description": "Order ID."
          },
          "original_price": {
            "type": "number",
            "description": "Original price."
          },
          "parent_item_id": {
            "type": "integer",
            "description": "Parent item ID."
          },
          "price": {
            "type": "number",
            "description": "Price."
          },
          "price_incl_tax": {
            "type": "number",
            "description": "Price including tax."
          },
          "product_id": {
            "type": "integer",
            "description": "Product ID."
          },
          "product_type": {
            "type": "string",
            "description": "Product type."
          },
          "qty_backordered": {
            "type": "number",
            "description": "Quantity backordered."
          },
          "qty_canceled": {
            "type": "number",
            "description": "Quantity canceled."
          },
          "qty_invoiced": {
            "type": "number",
            "description": "Quantity invoiced."
          },
          "qty_ordered": {
            "type": "number",
            "description": "Quantity ordered."
          },
          "qty_refunded": {
            "type": "number",
            "description": "Quantity refunded."
          },
          "qty_returned": {
            "type": "number",
            "description": "Quantity returned."
          },
          "qty_shipped": {
            "type": "number",
            "description": "Quantity shipped."
          },
          "quote_item_id": {
            "type": "integer",
            "description": "Quote item ID."
          },
          "row_invoiced": {
            "type": "number",
            "description": "Row invoiced."
          },
          "row_total": {
            "type": "number",
            "description": "Row total."
          },
          "row_total_incl_tax": {
            "type": "number",
            "description": "Row total including tax."
          },
          "row_weight": {
            "type": "number",
            "description": "Row weight."
          },
          "sku": {
            "type": "string",
            "description": "SKU."
          },
          "store_id": {
            "type": "integer",
            "description": "Store ID."
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount."
          },
          "tax_before_discount": {
            "type": "number",
            "description": "Tax before discount."
          },
          "tax_canceled": {
            "type": "number",
            "description": "Tax canceled."
          },
          "tax_invoiced": {
            "type": "number",
            "description": "Tax invoiced."
          },
          "tax_percent": {
            "type": "number",
            "description": "Tax percent."
          },
          "tax_refunded": {
            "type": "number",
            "description": "Tax refunded."
          },
          "updated_at": {
            "type": "string",
            "description": "Updated-at timestamp."
          },
          "weee_tax_applied": {
            "type": "string",
            "description": "WEEE tax applied."
          },
          "weee_tax_applied_amount": {
            "type": "number",
            "description": "WEEE tax applied amount."
          },
          "weee_tax_applied_row_amount": {
            "type": "number",
            "description": "WEEE tax applied row amount."
          },
          "weee_tax_disposition": {
            "type": "number",
            "description": "WEEE tax disposition."
          },
          "weee_tax_row_disposition": {
            "type": "number",
            "description": "WEEE tax row disposition."
          },
          "weight": {
            "type": "number",
            "description": "Weight."
          },
          "parent_item": {
            "$ref": "#/components/schemas/sales-data-order-item-interface"
          },
          "product_option": {
            "$ref": "#/components/schemas/catalog-data-product-option-interface"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-order-item-extension-interface"
          }
        },
        "required": [
          "sku"
        ]
      },
      "sales-data-order-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderItemInterface",
        "properties": {
          "itemized_taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-data-order-tax-item-interface"
            }
          },
          "gift_message": {
            "$ref": "#/components/schemas/gift-message-data-message-interface"
          },
          "gw_id": {
            "type": "string"
          },
          "gw_base_price": {
            "type": "string"
          },
          "gw_price": {
            "type": "string"
          },
          "gw_base_tax_amount": {
            "type": "string"
          },
          "gw_tax_amount": {
            "type": "string"
          },
          "gw_base_price_invoiced": {
            "type": "string"
          },
          "gw_price_invoiced": {
            "type": "string"
          },
          "gw_base_tax_amount_invoiced": {
            "type": "string"
          },
          "gw_tax_amount_invoiced": {
            "type": "string"
          },
          "gw_base_price_refunded": {
            "type": "string"
          },
          "gw_price_refunded": {
            "type": "string"
          },
          "gw_base_tax_amount_refunded": {
            "type": "string"
          },
          "gw_tax_amount_refunded": {
            "type": "string"
          }
        }
      },
      "tax-data-order-tax-item-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "tax_item_id": {
            "type": "integer",
            "description": "Tax item ID"
          },
          "tax_id": {
            "type": "integer",
            "description": "Tax ID"
          },
          "item_id": {
            "type": "integer",
            "description": "Order item ID"
          },
          "tax_code": {
            "type": "string",
            "description": "Tax code"
          },
          "tax_percent": {
            "type": "number",
            "description": "Tax percent"
          },
          "amount": {
            "type": "number",
            "description": "Tax amount"
          },
          "base_amount": {
            "type": "number",
            "description": "Tax amount in base currency"
          },
          "real_amount": {
            "type": "number",
            "description": "Real tax amount"
          },
          "real_base_amount": {
            "type": "number",
            "description": "Real tax amount in base currency"
          },
          "associated_item_id": {
            "type": "integer",
            "description": "Associated order item ID"
          },
          "taxable_item_type": {
            "type": "string",
            "description": "shipping, product, weee, quote_gw, etc..."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/tax-data-order-tax-item-extension-interface"
          }
        },
        "required": [
          "tax_percent",
          "amount",
          "base_amount",
          "real_amount",
          "real_base_amount"
        ]
      },
      "tax-data-order-tax-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxItemInterface"
      },
      "sales-data-order-address-interface": {
        "type": "object",
        "description": "Order address interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "address_type": {
            "type": "string",
            "description": "Address type."
          },
          "city": {
            "type": "string",
            "description": "City."
          },
          "company": {
            "type": "string",
            "description": "Company."
          },
          "country_id": {
            "type": "string",
            "description": "Country ID."
          },
          "customer_address_id": {
            "type": "integer",
            "description": "Country address ID."
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID."
          },
          "email": {
            "type": "string",
            "description": "Email address."
          },
          "entity_id": {
            "type": "integer",
            "description": "Order address ID."
          },
          "fax": {
            "type": "string",
            "description": "Fax number."
          },
          "firstname": {
            "type": "string",
            "description": "First name."
          },
          "lastname": {
            "type": "string",
            "description": "Last name."
          },
          "middlename": {
            "type": "string",
            "description": "Middle name."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "postcode": {
            "type": "string",
            "description": "Postal code."
          },
          "prefix": {
            "type": "string",
            "description": "Prefix."
          },
          "region": {
            "type": "string",
            "description": "Region."
          },
          "region_code": {
            "type": "string",
            "description": "Region code."
          },
          "region_id": {
            "type": "integer",
            "description": "Region ID."
          },
          "street": {
            "type": "array",
            "description": "Array of any street values. Otherwise, null.",
            "items": {
              "type": "string"
            }
          },
          "suffix": {
            "type": "string",
            "description": "Suffix."
          },
          "telephone": {
            "type": "string",
            "description": "Telephone number."
          },
          "vat_id": {
            "type": "string",
            "description": "VAT ID."
          },
          "vat_is_valid": {
            "type": "integer",
            "description": "VAT-is-valid flag value."
          },
          "vat_request_date": {
            "type": "string",
            "description": "VAT request date."
          },
          "vat_request_id": {
            "type": "string",
            "description": "VAT request ID."
          },
          "vat_request_success": {
            "type": "integer",
            "description": "VAT-request-success flag value."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-order-address-extension-interface"
          }
        },
        "required": [
          "address_type",
          "city",
          "country_id",
          "firstname",
          "lastname",
          "postcode",
          "telephone"
        ]
      },
      "sales-data-order-address-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderAddressInterface"
      },
      "sales-data-order-payment-interface": {
        "type": "object",
        "description": "Order payment interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "account_status": {
            "type": "string",
            "description": "Account status."
          },
          "additional_data": {
            "type": "string",
            "description": "Additional data."
          },
          "additional_information": {
            "type": "array",
            "description": "Array of additional information.",
            "items": {
              "type": "string"
            }
          },
          "address_status": {
            "type": "string",
            "description": "Address status."
          },
          "amount_authorized": {
            "type": "number",
            "description": "Amount authorized."
          },
          "amount_canceled": {
            "type": "number",
            "description": "Amount canceled."
          },
          "amount_ordered": {
            "type": "number",
            "description": "Amount ordered."
          },
          "amount_paid": {
            "type": "number",
            "description": "Amount paid."
          },
          "amount_refunded": {
            "type": "number",
            "description": "Amount refunded."
          },
          "anet_trans_method": {
            "type": "string",
            "description": "Anet transaction method."
          },
          "base_amount_authorized": {
            "type": "number",
            "description": "Base amount authorized."
          },
          "base_amount_canceled": {
            "type": "number",
            "description": "Base amount canceled."
          },
          "base_amount_ordered": {
            "type": "number",
            "description": "Base amount ordered."
          },
          "base_amount_paid": {
            "type": "number",
            "description": "Base amount paid."
          },
          "base_amount_paid_online": {
            "type": "number",
            "description": "Base amount paid online."
          },
          "base_amount_refunded": {
            "type": "number",
            "description": "Base amount refunded."
          },
          "base_amount_refunded_online": {
            "type": "number",
            "description": "Base amount refunded online."
          },
          "base_shipping_amount": {
            "type": "number",
            "description": "Base shipping amount."
          },
          "base_shipping_captured": {
            "type": "number",
            "description": "Base shipping captured amount."
          },
          "base_shipping_refunded": {
            "type": "number",
            "description": "Base shipping refunded amount."
          },
          "cc_approval": {
            "type": "string",
            "description": "Credit card approval."
          },
          "cc_avs_status": {
            "type": "string",
            "description": "Credit card avs status."
          },
          "cc_cid_status": {
            "type": "string",
            "description": "Credit card CID status."
          },
          "cc_debug_request_body": {
            "type": "string",
            "description": "Credit card debug request body."
          },
          "cc_debug_response_body": {
            "type": "string",
            "description": "Credit card debug response body."
          },
          "cc_debug_response_serialized": {
            "type": "string",
            "description": "Credit card debug response serialized."
          },
          "cc_exp_month": {
            "type": "string",
            "description": "Credit card expiration month."
          },
          "cc_exp_year": {
            "type": "string",
            "description": "Credit card expiration year."
          },
          "cc_last4": {
            "type": "string",
            "description": "Last four digits of the credit card."
          },
          "cc_number_enc": {
            "type": "string",
            "description": "Encrypted credit card number."
          },
          "cc_owner": {
            "type": "string",
            "description": "Credit card number."
          },
          "cc_secure_verify": {
            "type": "string",
            "description": "Credit card secure verify."
          },
          "cc_ss_issue": {
            "type": "string",
            "description": "Credit card SS issue."
          },
          "cc_ss_start_month": {
            "type": "string",
            "description": "Credit card SS start month."
          },
          "cc_ss_start_year": {
            "type": "string",
            "description": "Credit card SS start year."
          },
          "cc_status": {
            "type": "string",
            "description": "Credit card status."
          },
          "cc_status_description": {
            "type": "string",
            "description": "Credit card status description."
          },
          "cc_trans_id": {
            "type": "string",
            "description": "Credit card transaction ID."
          },
          "cc_type": {
            "type": "string",
            "description": "Credit card type."
          },
          "echeck_account_name": {
            "type": "string",
            "description": "eCheck account name."
          },
          "echeck_account_type": {
            "type": "string",
            "description": "eCheck account type."
          },
          "echeck_bank_name": {
            "type": "string",
            "description": "eCheck bank name."
          },
          "echeck_routing_number": {
            "type": "string",
            "description": "eCheck routing number."
          },
          "echeck_type": {
            "type": "string",
            "description": "eCheck type."
          },
          "entity_id": {
            "type": "integer",
            "description": "Entity ID."
          },
          "last_trans_id": {
            "type": "string",
            "description": "Last transaction ID."
          },
          "method": {
            "type": "string",
            "description": "Method."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "po_number": {
            "type": "string",
            "description": "PO number."
          },
          "protection_eligibility": {
            "type": "string",
            "description": "Protection eligibility."
          },
          "quote_payment_id": {
            "type": "integer",
            "description": "Quote payment ID."
          },
          "shipping_amount": {
            "type": "number",
            "description": "Shipping amount."
          },
          "shipping_captured": {
            "type": "number",
            "description": "Shipping captured."
          },
          "shipping_refunded": {
            "type": "number",
            "description": "Shipping refunded."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-order-payment-extension-interface"
          }
        },
        "required": [
          "account_status",
          "additional_information",
          "cc_last4",
          "method"
        ]
      },
      "sales-data-order-payment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderPaymentInterface",
        "properties": {
          "notification_message": {
            "type": "string"
          },
          "vault_payment_token": {
            "$ref": "#/components/schemas/vault-data-payment-token-interface"
          }
        }
      },
      "sales-data-order-status-history-interface": {
        "type": "object",
        "description": "Order status history interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "entity_id": {
            "type": "integer",
            "description": "Order status history ID."
          },
          "entity_name": {
            "type": "string",
            "description": "Entity name."
          },
          "is_customer_notified": {
            "type": "integer",
            "description": "Is-customer-notified flag value."
          },
          "is_visible_on_front": {
            "type": "integer",
            "description": "Is-visible-on-storefront flag value."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "status": {
            "type": "string",
            "description": "Status."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-order-status-history-extension-interface"
          }
        },
        "required": [
          "comment",
          "is_customer_notified",
          "is_visible_on_front",
          "parent_id"
        ]
      },
      "sales-data-order-status-history-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderStatusHistoryInterface"
      },
      "sales-data-order-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderInterface",
        "properties": {
          "shipping_assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sales-data-shipping-assignment-interface"
            }
          },
          "payment_additional_info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payment-data-payment-additional-info-interface"
            }
          },
          "company_order_attributes": {
            "$ref": "#/components/schemas/company-data-company-order-interface"
          },
          "custom_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/admin-ui-sdk-custom-fees-data-custom-fees-interface"
            }
          },
          "applied_taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-data-order-tax-details-applied-tax-interface"
            }
          },
          "item_applied_taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-data-order-tax-details-item-interface"
            }
          },
          "converting_from_quote": {
            "type": "boolean"
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-data-order-tax-interface"
            }
          },
          "additional_itemized_taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-data-order-tax-item-interface"
            }
          },
          "base_customer_balance_amount": {
            "type": "number"
          },
          "customer_balance_amount": {
            "type": "number"
          },
          "base_customer_balance_invoiced": {
            "type": "number"
          },
          "customer_balance_invoiced": {
            "type": "number"
          },
          "base_customer_balance_refunded": {
            "type": "number"
          },
          "customer_balance_refunded": {
            "type": "number"
          },
          "base_customer_balance_total_refunded": {
            "type": "number"
          },
          "customer_balance_total_refunded": {
            "type": "number"
          },
          "gift_cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gift-card-account-data-gift-card-interface"
            }
          },
          "base_gift_cards_amount": {
            "type": "number"
          },
          "gift_cards_amount": {
            "type": "number"
          },
          "base_gift_cards_invoiced": {
            "type": "number"
          },
          "gift_cards_invoiced": {
            "type": "number"
          },
          "base_gift_cards_refunded": {
            "type": "number"
          },
          "gift_cards_refunded": {
            "type": "number"
          },
          "gift_message": {
            "$ref": "#/components/schemas/gift-message-data-message-interface"
          },
          "gw_id": {
            "type": "string"
          },
          "gw_allow_gift_receipt": {
            "type": "string"
          },
          "gw_add_card": {
            "type": "string"
          },
          "gw_base_price": {
            "type": "string"
          },
          "gw_price": {
            "type": "string"
          },
          "gw_items_base_price": {
            "type": "string"
          },
          "gw_items_price": {
            "type": "string"
          },
          "gw_card_base_price": {
            "type": "string"
          },
          "gw_card_price": {
            "type": "string"
          },
          "gw_base_tax_amount": {
            "type": "string"
          },
          "gw_tax_amount": {
            "type": "string"
          },
          "gw_items_base_tax_amount": {
            "type": "string"
          },
          "gw_items_tax_amount": {
            "type": "string"
          },
          "gw_card_base_tax_amount": {
            "type": "string"
          },
          "gw_card_tax_amount": {
            "type": "string"
          },
          "gw_base_price_incl_tax": {
            "type": "string"
          },
          "gw_price_incl_tax": {
            "type": "string"
          },
          "gw_items_base_price_incl_tax": {
            "type": "string"
          },
          "gw_items_price_incl_tax": {
            "type": "string"
          },
          "gw_card_base_price_incl_tax": {
            "type": "string"
          },
          "gw_card_price_incl_tax": {
            "type": "string"
          },
          "gw_base_price_invoiced": {
            "type": "string"
          },
          "gw_price_invoiced": {
            "type": "string"
          },
          "gw_items_base_price_invoiced": {
            "type": "string"
          },
          "gw_items_price_invoiced": {
            "type": "string"
          },
          "gw_card_base_price_invoiced": {
            "type": "string"
          },
          "gw_card_price_invoiced": {
            "type": "string"
          },
          "gw_base_tax_amount_invoiced": {
            "type": "string"
          },
          "gw_tax_amount_invoiced": {
            "type": "string"
          },
          "gw_items_base_tax_invoiced": {
            "type": "string"
          },
          "gw_items_tax_invoiced": {
            "type": "string"
          },
          "gw_card_base_tax_invoiced": {
            "type": "string"
          },
          "gw_card_tax_invoiced": {
            "type": "string"
          },
          "gw_base_price_refunded": {
            "type": "string"
          },
          "gw_price_refunded": {
            "type": "string"
          },
          "gw_items_base_price_refunded": {
            "type": "string"
          },
          "gw_items_price_refunded": {
            "type": "string"
          },
          "gw_card_base_price_refunded": {
            "type": "string"
          },
          "gw_card_price_refunded": {
            "type": "string"
          },
          "gw_base_tax_amount_refunded": {
            "type": "string"
          },
          "gw_tax_amount_refunded": {
            "type": "string"
          },
          "gw_items_base_tax_refunded": {
            "type": "string"
          },
          "gw_items_tax_refunded": {
            "type": "string"
          },
          "gw_card_base_tax_refunded": {
            "type": "string"
          },
          "gw_card_tax_refunded": {
            "type": "string"
          },
          "pickup_location_code": {
            "type": "string"
          },
          "notification_sent": {
            "type": "integer"
          },
          "send_notification": {
            "type": "integer"
          },
          "coupon_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "coupon_discounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reward_points_balance": {
            "type": "integer"
          },
          "reward_currency_amount": {
            "type": "number"
          },
          "base_reward_currency_amount": {
            "type": "number"
          }
        }
      },
      "sales-data-shipping-assignment-interface": {
        "type": "object",
        "description": "Interface ShippingAssignmentInterface",
        "properties": {
          "shipping": {
            "$ref": "#/components/schemas/sales-data-shipping-interface"
          },
          "items": {
            "type": "array",
            "description": "Order items of shipping assignment",
            "items": {
              "$ref": "#/components/schemas/sales-data-order-item-interface"
            }
          },
          "stock_id": {
            "type": "integer",
            "description": "Stock id"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipping-assignment-extension-interface"
          }
        },
        "required": [
          "shipping",
          "items"
        ]
      },
      "sales-data-shipping-interface": {
        "type": "object",
        "description": "Interface ShippingInterface",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/sales-data-order-address-interface"
          },
          "method": {
            "type": "string",
            "description": "Shipping method"
          },
          "total": {
            "$ref": "#/components/schemas/sales-data-total-interface"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipping-extension-interface"
          }
        }
      },
      "sales-data-total-interface": {
        "type": "object",
        "description": "Interface TotalInterface",
        "properties": {
          "base_shipping_amount": {
            "type": "number",
            "description": "Base shipping amount."
          },
          "base_shipping_canceled": {
            "type": "number",
            "description": "Base shipping canceled."
          },
          "base_shipping_discount_amount": {
            "type": "number",
            "description": "Base shipping discount amount."
          },
          "base_shipping_discount_tax_compensation_amnt": {
            "type": "number",
            "description": "Base shipping discount tax compensation amount."
          },
          "base_shipping_incl_tax": {
            "type": "number",
            "description": "Base shipping including tax."
          },
          "base_shipping_invoiced": {
            "type": "number",
            "description": "Base shipping invoiced."
          },
          "base_shipping_refunded": {
            "type": "number",
            "description": "Base shipping refunded."
          },
          "base_shipping_tax_amount": {
            "type": "number",
            "description": "Base shipping tax amount."
          },
          "base_shipping_tax_refunded": {
            "type": "number",
            "description": "Base shipping tax refunded."
          },
          "shipping_amount": {
            "type": "number",
            "description": "Shipping amount."
          },
          "shipping_canceled": {
            "type": "number",
            "description": "Shipping canceled amount."
          },
          "shipping_discount_amount": {
            "type": "number",
            "description": "Shipping discount amount."
          },
          "shipping_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Shipping discount tax compensation amount."
          },
          "shipping_incl_tax": {
            "type": "number",
            "description": "Shipping including tax amount."
          },
          "shipping_invoiced": {
            "type": "number",
            "description": "Shipping invoiced amount."
          },
          "shipping_refunded": {
            "type": "number",
            "description": "Shipping refunded amount."
          },
          "shipping_tax_amount": {
            "type": "number",
            "description": "Shipping tax amount."
          },
          "shipping_tax_refunded": {
            "type": "number",
            "description": "Shipping tax refunded amount."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-total-extension-interface"
          }
        }
      },
      "sales-data-total-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TotalInterface"
      },
      "sales-data-shipping-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingInterface"
      },
      "sales-data-shipping-assignment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingAssignmentInterface"
      },
      "company-data-company-order-interface": {
        "type": "object",
        "description": "Order company extension attributes interface. Adds new company attributes to orders.",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "Order ID."
          },
          "company_id": {
            "type": "integer",
            "description": "Company ID."
          },
          "company_name": {
            "type": "string",
            "description": "Company name."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/company-data-company-order-extension-interface"
          }
        }
      },
      "company-data-company-order-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\CompanyOrderInterface"
      },
      "tax-data-order-tax-details-applied-tax-interface": {
        "type": "object",
        "description": "Interface OrderTaxDetailsAppliedTaxInterface",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "percent": {
            "type": "number",
            "description": "Tax Percent"
          },
          "amount": {
            "type": "number",
            "description": "Tax amount"
          },
          "base_amount": {
            "type": "number",
            "description": "Tax amount in base currency"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/tax-data-order-tax-details-applied-tax-extension-interface"
          }
        },
        "required": [
          "amount",
          "base_amount"
        ]
      },
      "tax-data-order-tax-details-applied-tax-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsAppliedTaxInterface",
        "properties": {
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-data-applied-tax-rate-interface"
            }
          }
        }
      },
      "tax-data-order-tax-details-item-interface": {
        "type": "object",
        "description": "Interface OrderTaxDetailsItemInterface",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type (shipping, product, weee, gift wrapping, etc)"
          },
          "item_id": {
            "type": "integer",
            "description": "Item id if this item is a product"
          },
          "associated_item_id": {
            "type": "integer",
            "description": "Associated item id if this item is associated with another item, null otherwise"
          },
          "applied_taxes": {
            "type": "array",
            "description": "Applied taxes",
            "items": {
              "$ref": "#/components/schemas/tax-data-order-tax-details-applied-tax-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/tax-data-order-tax-details-item-extension-interface"
          }
        }
      },
      "tax-data-order-tax-details-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsItemInterface"
      },
      "tax-data-order-tax-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "tax_id": {
            "type": "integer",
            "description": "Tax ID"
          },
          "order_id": {
            "type": "integer",
            "description": "Order ID"
          },
          "code": {
            "type": "string",
            "description": "Code"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "percent": {
            "type": "number",
            "description": "Percent"
          },
          "amount": {
            "type": "number",
            "description": "Amount"
          },
          "base_amount": {
            "type": "number",
            "description": "Tax amount in base currency"
          },
          "base_real_amount": {
            "type": "number",
            "description": "Real tax amount in base currency"
          },
          "priority": {
            "type": "integer",
            "description": "Priority"
          },
          "position": {
            "type": "integer",
            "description": "Position"
          },
          "process": {
            "type": "integer",
            "description": "Process"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/tax-data-order-tax-extension-interface"
          }
        },
        "required": [
          "percent",
          "amount",
          "base_amount",
          "base_real_amount",
          "priority",
          "position",
          "process"
        ]
      },
      "tax-data-order-tax-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxInterface"
      },
      "sales-data-order-search-result-interface": {
        "type": "object",
        "description": "Order search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-order-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-order-status-history-search-result-interface": {
        "type": "object",
        "description": "Order status history search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-order-status-history-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-order-item-search-result-interface": {
        "type": "object",
        "description": "Order item search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-order-item-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-invoice-interface": {
        "type": "object",
        "description": "Invoice interface. An invoice is a record of the receipt of payment for an order.",
        "properties": {
          "base_currency_code": {
            "type": "string",
            "description": "Base currency code."
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Base discount amount."
          },
          "base_grand_total": {
            "type": "number",
            "description": "Base grand total."
          },
          "base_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Base discount tax compensation amount."
          },
          "base_shipping_amount": {
            "type": "number",
            "description": "Base shipping amount."
          },
          "base_shipping_discount_tax_compensation_amnt": {
            "type": "number",
            "description": "Base shipping discount tax compensation amount."
          },
          "base_shipping_incl_tax": {
            "type": "number",
            "description": "Base shipping including tax."
          },
          "base_shipping_tax_amount": {
            "type": "number",
            "description": "Base shipping tax amount."
          },
          "base_subtotal": {
            "type": "number",
            "description": "Base subtotal."
          },
          "base_subtotal_incl_tax": {
            "type": "number",
            "description": "Base subtotal including tax."
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Base tax amount."
          },
          "base_total_refunded": {
            "type": "number",
            "description": "Base total refunded."
          },
          "base_to_global_rate": {
            "type": "number",
            "description": "Base-to-global rate."
          },
          "base_to_order_rate": {
            "type": "number",
            "description": "Base-to-order rate."
          },
          "billing_address_id": {
            "type": "integer",
            "description": "Billing address ID."
          },
          "can_void_flag": {
            "type": "integer",
            "description": "Can void flag value."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount."
          },
          "discount_description": {
            "type": "string",
            "description": "Discount description."
          },
          "email_sent": {
            "type": "integer",
            "description": "Email-sent flag value."
          },
          "entity_id": {
            "type": "integer",
            "description": "Invoice ID."
          },
          "global_currency_code": {
            "type": "string",
            "description": "Global currency code."
          },
          "grand_total": {
            "type": "number",
            "description": "Grand total."
          },
          "discount_tax_compensation_amount": {
            "type": "number",
            "description": "Discount tax compensation amount."
          },
          "increment_id": {
            "type": "string",
            "description": "Increment ID."
          },
          "is_used_for_refund": {
            "type": "integer",
            "description": "Is-used-for-refund flag value."
          },
          "order_currency_code": {
            "type": "string",
            "description": "Order currency code."
          },
          "order_id": {
            "type": "integer",
            "description": "Order ID."
          },
          "shipping_address_id": {
            "type": "integer",
            "description": "Shipping address ID."
          },
          "shipping_amount": {
            "type": "number",
            "description": "Shipping amount."
          },
          "shipping_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Shipping discount tax compensation amount."
          },
          "shipping_incl_tax": {
            "type": "number",
            "description": "Shipping including tax."
          },
          "shipping_tax_amount": {
            "type": "number",
            "description": "Shipping tax amount."
          },
          "state": {
            "type": "integer",
            "description": "State."
          },
          "store_currency_code": {
            "type": "string",
            "description": "Store currency code."
          },
          "store_id": {
            "type": "integer",
            "description": "Store ID."
          },
          "store_to_base_rate": {
            "type": "number",
            "description": "Store-to-base rate."
          },
          "store_to_order_rate": {
            "type": "number",
            "description": "Store-to-order rate."
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal."
          },
          "subtotal_incl_tax": {
            "type": "number",
            "description": "Subtotal including tax."
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount."
          },
          "total_qty": {
            "type": "number",
            "description": "Total quantity."
          },
          "transaction_id": {
            "type": "string",
            "description": "Transaction ID."
          },
          "updated_at": {
            "type": "string",
            "description": "Updated-at timestamp."
          },
          "items": {
            "type": "array",
            "description": "Array of invoice items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-invoice-item-interface"
            }
          },
          "comments": {
            "type": "array",
            "description": "Array of any invoice comments. Otherwise, null.",
            "items": {
              "$ref": "#/components/schemas/sales-data-invoice-comment-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-invoice-extension-interface"
          }
        },
        "required": [
          "order_id",
          "total_qty",
          "items"
        ]
      },
      "sales-data-invoice-item-interface": {
        "type": "object",
        "description": "Invoice item interface. An invoice is a record of the receipt of payment for an order. An invoice item is a purchased item in an invoice.",
        "properties": {
          "additional_data": {
            "type": "string",
            "description": "Additional data."
          },
          "base_cost": {
            "type": "number",
            "description": "Base cost."
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Base discount amount."
          },
          "base_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Base discount tax compensation amount."
          },
          "base_price": {
            "type": "number",
            "description": "Base price."
          },
          "base_price_incl_tax": {
            "type": "number",
            "description": "Base price including tax."
          },
          "base_row_total": {
            "type": "number",
            "description": "Base row total."
          },
          "base_row_total_incl_tax": {
            "type": "number",
            "description": "Base row total including tax."
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Base tax amount."
          },
          "description": {
            "type": "string",
            "description": "Description."
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount."
          },
          "entity_id": {
            "type": "integer",
            "description": "Invoice item ID."
          },
          "discount_tax_compensation_amount": {
            "type": "number",
            "description": "Discount tax compensation amount."
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "price": {
            "type": "number",
            "description": "Price."
          },
          "price_incl_tax": {
            "type": "number",
            "description": "Price including tax."
          },
          "product_id": {
            "type": "integer",
            "description": "Product ID."
          },
          "row_total": {
            "type": "number",
            "description": "Row total."
          },
          "row_total_incl_tax": {
            "type": "number",
            "description": "Row total including tax."
          },
          "sku": {
            "type": "string",
            "description": "SKU."
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-invoice-item-extension-interface"
          },
          "order_item_id": {
            "type": "integer",
            "description": "Order item ID."
          },
          "qty": {
            "type": "number",
            "description": "Quantity."
          }
        },
        "required": [
          "sku",
          "order_item_id",
          "qty"
        ]
      },
      "sales-data-invoice-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemInterface"
      },
      "sales-data-invoice-comment-interface": {
        "type": "object",
        "description": "Invoice comment interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.",
        "properties": {
          "is_customer_notified": {
            "type": "integer",
            "description": "Is-customer-notified flag value."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-invoice-comment-extension-interface"
          },
          "comment": {
            "type": "string",
            "description": "Comment."
          },
          "is_visible_on_front": {
            "type": "integer",
            "description": "Is-visible-on-storefront flag value."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "entity_id": {
            "type": "integer",
            "description": "Invoice ID."
          }
        },
        "required": [
          "is_customer_notified",
          "parent_id",
          "comment",
          "is_visible_on_front"
        ]
      },
      "sales-data-invoice-comment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentInterface"
      },
      "sales-data-invoice-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceInterface",
        "properties": {
          "base_customer_balance_amount": {
            "type": "number"
          },
          "customer_balance_amount": {
            "type": "number"
          },
          "base_gift_cards_amount": {
            "type": "number"
          },
          "gift_cards_amount": {
            "type": "number"
          },
          "gw_base_price": {
            "type": "string"
          },
          "gw_price": {
            "type": "string"
          },
          "gw_items_base_price": {
            "type": "string"
          },
          "gw_items_price": {
            "type": "string"
          },
          "gw_card_base_price": {
            "type": "string"
          },
          "gw_card_price": {
            "type": "string"
          },
          "gw_base_tax_amount": {
            "type": "string"
          },
          "gw_tax_amount": {
            "type": "string"
          },
          "gw_items_base_tax_amount": {
            "type": "string"
          },
          "gw_items_tax_amount": {
            "type": "string"
          },
          "gw_card_base_tax_amount": {
            "type": "string"
          },
          "gw_card_tax_amount": {
            "type": "string"
          }
        }
      },
      "sales-data-invoice-search-result-interface": {
        "type": "object",
        "description": "Invoice search result interface. An invoice is a record of the receipt of payment for an order.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-invoice-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-invoice-comment-search-result-interface": {
        "type": "object",
        "description": "Invoice comment search result interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-invoice-comment-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-creditmemo-item-creation-interface": {
        "type": "object",
        "description": "Interface CreditmemoItemCreationInterface",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-creditmemo-item-creation-extension-interface"
          },
          "order_item_id": {
            "type": "integer",
            "description": "Order item ID."
          },
          "qty": {
            "type": "number",
            "description": "Quantity."
          }
        },
        "required": [
          "order_item_id",
          "qty"
        ]
      },
      "sales-data-creditmemo-item-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface"
      },
      "sales-data-creditmemo-comment-creation-interface": {
        "type": "object",
        "description": "Interface CreditmemoCommentCreationInterface",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-creditmemo-comment-creation-extension-interface"
          },
          "comment": {
            "type": "string",
            "description": "Comment."
          },
          "is_visible_on_front": {
            "type": "integer",
            "description": "Is-visible-on-storefront flag value."
          }
        },
        "required": [
          "comment",
          "is_visible_on_front"
        ]
      },
      "sales-data-creditmemo-comment-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface"
      },
      "sales-data-creditmemo-creation-arguments-interface": {
        "type": "object",
        "description": "Interface CreditmemoCreationArgumentsInterface",
        "properties": {
          "shipping_amount": {
            "type": "number",
            "description": "Credit memo shipping amount."
          },
          "adjustment_positive": {
            "type": "number",
            "description": "Credit memo positive adjustment."
          },
          "adjustment_negative": {
            "type": "number",
            "description": "Credit memo negative adjustment."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-creditmemo-creation-arguments-extension-interface"
          }
        }
      },
      "sales-data-creditmemo-creation-arguments-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface",
        "properties": {
          "return_to_stock_items": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "sales-data-creditmemo-comment-search-result-interface": {
        "type": "object",
        "description": "Credit memo comment search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-creditmemo-comment-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-creditmemo-comment-interface": {
        "type": "object",
        "description": "Credit memo comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "entity_id": {
            "type": "integer",
            "description": "Credit memo ID."
          },
          "is_customer_notified": {
            "type": "integer",
            "description": "Is-customer-notified flag value."
          },
          "is_visible_on_front": {
            "type": "integer",
            "description": "Is-visible-on-storefront flag value."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-creditmemo-comment-extension-interface"
          }
        },
        "required": [
          "comment",
          "is_customer_notified",
          "is_visible_on_front",
          "parent_id"
        ]
      },
      "sales-data-creditmemo-comment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentInterface"
      },
      "sales-data-creditmemo-interface": {
        "type": "object",
        "description": "Credit memo interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
        "properties": {
          "adjustment": {
            "type": "number",
            "description": "Credit memo adjustment."
          },
          "adjustment_negative": {
            "type": "number",
            "description": "Credit memo negative adjustment."
          },
          "adjustment_positive": {
            "type": "number",
            "description": "Credit memo positive adjustment."
          },
          "base_adjustment": {
            "type": "number",
            "description": "Credit memo base adjustment."
          },
          "base_adjustment_negative": {
            "type": "number",
            "description": "Credit memo negative base adjustment."
          },
          "base_adjustment_positive": {
            "type": "number",
            "description": "Credit memo positive base adjustment."
          },
          "base_currency_code": {
            "type": "string",
            "description": "Credit memo base currency code."
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Credit memo base discount amount."
          },
          "base_grand_total": {
            "type": "number",
            "description": "Credit memo base grand total."
          },
          "base_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Credit memo base discount tax compensation amount."
          },
          "base_shipping_amount": {
            "type": "number",
            "description": "Credit memo base shipping amount."
          },
          "base_shipping_discount_tax_compensation_amnt": {
            "type": "number",
            "description": "Credit memo base shipping discount tax compensation amount."
          },
          "base_shipping_incl_tax": {
            "type": "number",
            "description": "Credit memo base shipping including tax."
          },
          "base_shipping_tax_amount": {
            "type": "number",
            "description": "Credit memo base shipping tax amount."
          },
          "base_subtotal": {
            "type": "number",
            "description": "Credit memo base subtotal."
          },
          "base_subtotal_incl_tax": {
            "type": "number",
            "description": "Credit memo base subtotal including tax."
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Credit memo base tax amount."
          },
          "base_to_global_rate": {
            "type": "number",
            "description": "Credit memo base-to-global rate."
          },
          "base_to_order_rate": {
            "type": "number",
            "description": "Credit memo base-to-order rate."
          },
          "billing_address_id": {
            "type": "integer",
            "description": "Credit memo billing address ID."
          },
          "created_at": {
            "type": "string",
            "description": "Credit memo created-at timestamp."
          },
          "creditmemo_status": {
            "type": "integer",
            "description": "Credit memo status."
          },
          "discount_amount": {
            "type": "number",
            "description": "Credit memo discount amount."
          },
          "discount_description": {
            "type": "string",
            "description": "Credit memo discount description."
          },
          "email_sent": {
            "type": "integer",
            "description": "Credit memo email sent flag value."
          },
          "entity_id": {
            "type": "integer",
            "description": "Credit memo ID."
          },
          "global_currency_code": {
            "type": "string",
            "description": "Credit memo global currency code."
          },
          "grand_total": {
            "type": "number",
            "description": "Credit memo grand total."
          },
          "discount_tax_compensation_amount": {
            "type": "number",
            "description": "Credit memo discount tax compensation amount."
          },
          "increment_id": {
            "type": "string",
            "description": "Credit memo increment ID."
          },
          "invoice_id": {
            "type": "integer",
            "description": "Credit memo invoice ID."
          },
          "order_currency_code": {
            "type": "string",
            "description": "Credit memo order currency code."
          },
          "order_id": {
            "type": "integer",
            "description": "Credit memo order ID."
          },
          "shipping_address_id": {
            "type": "integer",
            "description": "Credit memo shipping address ID."
          },
          "shipping_amount": {
            "type": "number",
            "description": "Credit memo shipping amount."
          },
          "shipping_discount_tax_compensation_amount": {
            "type": "number",
            "description": "Credit memo shipping discount tax compensation amount."
          },
          "shipping_incl_tax": {
            "type": "number",
            "description": "Credit memo shipping including tax."
          },
          "shipping_tax_amount": {
            "type": "number",
            "description": "Credit memo shipping tax amount."
          },
          "state": {
            "type": "integer",
            "description": "Credit memo state."
          },
          "store_currency_code": {
            "type": "string",
            "description": "Credit memo store currency code."
          },
          "store_id": {
            "type": "integer",
            "description": "Credit memo store ID."
          },
          "store_to_base_rate": {
            "type": "number",
            "description": "Credit memo store-to-base rate."
          },
          "store_to_order_rate": {
            "type": "number",
            "description": "Credit memo store-to-order rate."
          },
          "subtotal": {
            "type": "number",
            "description": "Credit memo subtotal."
          },
          "subtotal_incl_tax": {
            "type": "number",
            "description": "Credit memo subtotal including tax."
          },
          "tax_amount": {
            "type": "number",
            "description": "Credit memo tax amount."
          },
          "transaction_id": {
            "type": "string",
            "description": "Credit memo transaction ID."
          },
          "updated_at": {
            "type": "string",
            "description": "Credit memo updated-at timestamp."
          },
          "items": {
            "type": "array",
            "description": "Array of credit memo items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-creditmemo-item-interface"
            }
          },
          "comments": {
            "type": "array",
            "description": "Array of any credit memo comments. Otherwise, null.",
            "items": {
              "$ref": "#/components/schemas/sales-data-creditmemo-comment-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-creditmemo-extension-interface"
          }
        },
        "required": [
          "order_id",
          "items"
        ]
      },
      "sales-data-creditmemo-item-interface": {
        "type": "object",
        "description": "Credit memo item interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo item is an invoiced item for which a merchant creates a credit memo.",
        "properties": {
          "additional_data": {
            "type": "string",
            "description": "Additional data."
          },
          "base_cost": {
            "type": "number",
            "description": "The base cost for a credit memo item."
          },
          "base_discount_amount": {
            "type": "number",
            "description": "The base discount amount for a credit memo item."
          },
          "base_discount_tax_compensation_amount": {
            "type": "number",
            "description": "The base discount tax compensation amount for a credit memo item."
          },
          "base_price": {
            "type": "number",
            "description": "The base price for a credit memo item."
          },
          "base_price_incl_tax": {
            "type": "number",
            "description": "Base price including tax."
          },
          "base_row_total": {
            "type": "number",
            "description": "Base row total."
          },
          "base_row_total_incl_tax": {
            "type": "number",
            "description": "Base row total including tax."
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Base tax amount."
          },
          "base_weee_tax_applied_amount": {
            "type": "number",
            "description": "Base WEEE tax applied amount."
          },
          "base_weee_tax_applied_row_amnt": {
            "type": "number",
            "description": "Base WEEE tax applied row amount."
          },
          "base_weee_tax_disposition": {
            "type": "number",
            "description": "Base WEEE tax disposition."
          },
          "base_weee_tax_row_disposition": {
            "type": "number",
            "description": "Base WEEE tax row disposition."
          },
          "description": {
            "type": "string",
            "description": "Description."
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount."
          },
          "entity_id": {
            "type": "integer",
            "description": "Credit memo item ID."
          },
          "discount_tax_compensation_amount": {
            "type": "number",
            "description": "Discount tax compensation amount."
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "order_item_id": {
            "type": "integer",
            "description": "Order item ID."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "price": {
            "type": "number",
            "description": "Price."
          },
          "price_incl_tax": {
            "type": "number",
            "description": "Price including tax."
          },
          "product_id": {
            "type": "integer",
            "description": "Product ID."
          },
          "qty": {
            "type": "number",
            "description": "Quantity."
          },
          "row_total": {
            "type": "number",
            "description": "Row total."
          },
          "row_total_incl_tax": {
            "type": "number",
            "description": "Row total including tax."
          },
          "sku": {
            "type": "string",
            "description": "SKU."
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount."
          },
          "weee_tax_applied": {
            "type": "string",
            "description": "WEEE tax applied."
          },
          "weee_tax_applied_amount": {
            "type": "number",
            "description": "WEEE tax applied amount."
          },
          "weee_tax_applied_row_amount": {
            "type": "number",
            "description": "WEEE tax applied row amount."
          },
          "weee_tax_disposition": {
            "type": "number",
            "description": "WEEE tax disposition."
          },
          "weee_tax_row_disposition": {
            "type": "number",
            "description": "WEEE tax row disposition."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-creditmemo-item-extension-interface"
          }
        },
        "required": [
          "base_cost",
          "base_price",
          "entity_id",
          "order_item_id",
          "qty"
        ]
      },
      "sales-data-creditmemo-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemInterface"
      },
      "sales-data-creditmemo-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoInterface",
        "properties": {
          "base_customer_balance_amount": {
            "type": "number"
          },
          "customer_balance_amount": {
            "type": "number"
          },
          "base_gift_cards_amount": {
            "type": "number"
          },
          "gift_cards_amount": {
            "type": "number"
          },
          "gw_base_price": {
            "type": "string"
          },
          "gw_price": {
            "type": "string"
          },
          "gw_items_base_price": {
            "type": "string"
          },
          "gw_items_price": {
            "type": "string"
          },
          "gw_card_base_price": {
            "type": "string"
          },
          "gw_card_price": {
            "type": "string"
          },
          "gw_base_tax_amount": {
            "type": "string"
          },
          "gw_tax_amount": {
            "type": "string"
          },
          "gw_items_base_tax_amount": {
            "type": "string"
          },
          "gw_items_tax_amount": {
            "type": "string"
          },
          "gw_card_base_tax_amount": {
            "type": "string"
          },
          "gw_card_tax_amount": {
            "type": "string"
          }
        }
      },
      "sales-data-creditmemo-search-result-interface": {
        "type": "object",
        "description": "Credit memo search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-creditmemo-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-shipment-interface": {
        "type": "object",
        "description": "Shipment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. This interface creates shipment record without items quantity (total_qty) validation. To validate total shipped quantity for each item in the order you must use newer `POST /V1/order/:orderId/ship` endpoint.",
        "properties": {
          "billing_address_id": {
            "type": "integer",
            "description": "Billing address ID."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID."
          },
          "email_sent": {
            "type": "integer",
            "description": "Email-sent flag value."
          },
          "entity_id": {
            "type": "integer",
            "description": "Shipment ID."
          },
          "increment_id": {
            "type": "string",
            "description": "Increment ID."
          },
          "order_id": {
            "type": "integer",
            "description": "Order ID."
          },
          "packages": {
            "type": "array",
            "description": "Array of packages, if any. Otherwise, null.",
            "items": {
              "$ref": "#/components/schemas/sales-data-shipment-package-interface"
            }
          },
          "shipment_status": {
            "type": "integer",
            "description": "Shipment status."
          },
          "shipping_address_id": {
            "type": "integer",
            "description": "Shipping address ID."
          },
          "shipping_label": {
            "type": "string",
            "description": "Shipping label."
          },
          "store_id": {
            "type": "integer",
            "description": "Store ID."
          },
          "total_qty": {
            "type": "number",
            "description": "Total quantity."
          },
          "total_weight": {
            "type": "number",
            "description": "Total weight."
          },
          "updated_at": {
            "type": "string",
            "description": "Updated-at timestamp."
          },
          "items": {
            "type": "array",
            "description": "Array of items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-shipment-item-interface"
            }
          },
          "tracks": {
            "type": "array",
            "description": "Array of tracks.",
            "items": {
              "$ref": "#/components/schemas/sales-data-shipment-track-interface"
            }
          },
          "comments": {
            "type": "array",
            "description": "Array of comments.",
            "items": {
              "$ref": "#/components/schemas/sales-data-shipment-comment-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-extension-interface"
          }
        },
        "required": [
          "order_id",
          "items",
          "tracks",
          "comments"
        ]
      },
      "sales-data-shipment-package-interface": {
        "type": "object",
        "description": "Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-package-extension-interface"
          }
        }
      },
      "sales-data-shipment-package-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageInterface"
      },
      "sales-data-shipment-item-interface": {
        "type": "object",
        "description": "Shipment item interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A product is an item in a shipment.",
        "properties": {
          "additional_data": {
            "type": "string",
            "description": "Additional data."
          },
          "description": {
            "type": "string",
            "description": "Description."
          },
          "entity_id": {
            "type": "integer",
            "description": "Shipment item ID."
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "price": {
            "type": "number",
            "description": "Price."
          },
          "product_id": {
            "type": "integer",
            "description": "Product ID."
          },
          "row_total": {
            "type": "number",
            "description": "Row total."
          },
          "sku": {
            "type": "string",
            "description": "SKU."
          },
          "weight": {
            "type": "number",
            "description": "Weight."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-item-extension-interface"
          },
          "order_item_id": {
            "type": "integer",
            "description": "Order item ID."
          },
          "qty": {
            "type": "number",
            "description": "Quantity."
          }
        },
        "required": [
          "order_item_id",
          "qty"
        ]
      },
      "sales-data-shipment-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemInterface"
      },
      "sales-data-shipment-track-interface": {
        "type": "object",
        "description": "Shipment track interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. Merchants and customers can track shipments.",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "The order_id for the shipment package."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "entity_id": {
            "type": "integer",
            "description": "Shipment package ID."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "updated_at": {
            "type": "string",
            "description": "Updated-at timestamp."
          },
          "weight": {
            "type": "number",
            "description": "Weight."
          },
          "qty": {
            "type": "number",
            "description": "Quantity."
          },
          "description": {
            "type": "string",
            "description": "Description."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-track-extension-interface"
          },
          "track_number": {
            "type": "string",
            "description": "Track number."
          },
          "title": {
            "type": "string",
            "description": "Title."
          },
          "carrier_code": {
            "type": "string",
            "description": "Carrier code."
          }
        },
        "required": [
          "order_id",
          "parent_id",
          "weight",
          "qty",
          "description",
          "track_number",
          "title",
          "carrier_code"
        ]
      },
      "sales-data-shipment-track-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackInterface"
      },
      "sales-data-shipment-comment-interface": {
        "type": "object",
        "description": "Shipment comment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.",
        "properties": {
          "is_customer_notified": {
            "type": "integer",
            "description": "Is-customer-notified flag value."
          },
          "parent_id": {
            "type": "integer",
            "description": "Parent ID."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-comment-extension-interface"
          },
          "comment": {
            "type": "string",
            "description": "Comment."
          },
          "is_visible_on_front": {
            "type": "integer",
            "description": "Is-visible-on-storefront flag value."
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "entity_id": {
            "type": "integer",
            "description": "Invoice ID."
          }
        },
        "required": [
          "is_customer_notified",
          "parent_id",
          "comment",
          "is_visible_on_front"
        ]
      },
      "sales-data-shipment-comment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentInterface"
      },
      "sales-data-shipment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentInterface",
        "properties": {
          "source_code": {
            "type": "string"
          }
        }
      },
      "sales-data-shipment-search-result-interface": {
        "type": "object",
        "description": "Shipment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-shipment-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-shipment-comment-search-result-interface": {
        "type": "object",
        "description": "Shipment comment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-shipment-comment-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-shipment-item-creation-interface": {
        "type": "object",
        "description": "Input argument for shipment item creation Interface ShipmentItemCreationInterface",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-item-creation-extension-interface"
          },
          "order_item_id": {
            "type": "integer",
            "description": "Order item ID."
          },
          "qty": {
            "type": "number",
            "description": "Quantity."
          }
        },
        "required": [
          "order_item_id",
          "qty"
        ]
      },
      "sales-data-shipment-item-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface"
      },
      "sales-data-shipment-comment-creation-interface": {
        "type": "object",
        "description": "Interface ShipmentCommentCreationInterface",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-comment-creation-extension-interface"
          },
          "comment": {
            "type": "string",
            "description": "Comment."
          },
          "is_visible_on_front": {
            "type": "integer",
            "description": "Is-visible-on-storefront flag value."
          }
        },
        "required": [
          "comment",
          "is_visible_on_front"
        ]
      },
      "sales-data-shipment-comment-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface"
      },
      "sales-data-shipment-track-creation-interface": {
        "type": "object",
        "description": "Shipment Track Creation interface.",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-track-creation-extension-interface"
          },
          "track_number": {
            "type": "string",
            "description": "Track number."
          },
          "title": {
            "type": "string",
            "description": "Title."
          },
          "carrier_code": {
            "type": "string",
            "description": "Carrier code."
          }
        },
        "required": [
          "track_number",
          "title",
          "carrier_code"
        ]
      },
      "sales-data-shipment-track-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface"
      },
      "sales-data-shipment-package-creation-interface": {
        "type": "object",
        "description": "Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-package-creation-extension-interface"
          }
        }
      },
      "sales-data-shipment-package-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface"
      },
      "sales-data-shipment-creation-arguments-interface": {
        "type": "object",
        "description": "Interface for creation arguments for Shipment.",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-shipment-creation-arguments-extension-interface"
          }
        }
      },
      "sales-data-shipment-creation-arguments-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface",
        "properties": {
          "source_code": {
            "type": "string"
          }
        }
      },
      "sales-data-transaction-interface": {
        "type": "object",
        "description": "Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.",
        "properties": {
          "transaction_id": {
            "type": "integer",
            "description": "Transaction ID."
          },
          "parent_id": {
            "type": "integer",
            "description": "The parent ID for the transaction. Otherwise, null."
          },
          "order_id": {
            "type": "integer",
            "description": "Order ID."
          },
          "payment_id": {
            "type": "integer",
            "description": "Payment ID."
          },
          "txn_id": {
            "type": "string",
            "description": "Transaction business ID."
          },
          "parent_txn_id": {
            "type": "string",
            "description": "Parent transaction business ID."
          },
          "txn_type": {
            "type": "string",
            "description": "Transaction type."
          },
          "is_closed": {
            "type": "integer",
            "description": "Is-closed flag value."
          },
          "additional_information": {
            "type": "array",
            "description": "Array of additional information. Otherwise, null.",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Created-at timestamp."
          },
          "child_transactions": {
            "type": "array",
            "description": "Array of child transactions.",
            "items": {
              "$ref": "#/components/schemas/sales-data-transaction-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-transaction-extension-interface"
          }
        },
        "required": [
          "transaction_id",
          "order_id",
          "payment_id",
          "txn_id",
          "parent_txn_id",
          "txn_type",
          "is_closed",
          "created_at",
          "child_transactions"
        ]
      },
      "sales-data-transaction-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface"
      },
      "sales-data-transaction-search-result-interface": {
        "type": "object",
        "description": "Transaction search result interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Array of collection items.",
            "items": {
              "$ref": "#/components/schemas/sales-data-transaction-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-data-invoice-item-creation-interface": {
        "type": "object",
        "description": "Input argument for invoice creation Interface InvoiceItemCreationInterface",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-invoice-item-creation-extension-interface"
          },
          "order_item_id": {
            "type": "integer",
            "description": "Order item ID."
          },
          "qty": {
            "type": "number",
            "description": "Quantity."
          }
        },
        "required": [
          "order_item_id",
          "qty"
        ]
      },
      "sales-data-invoice-item-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemCreationInterface"
      },
      "sales-data-invoice-comment-creation-interface": {
        "type": "object",
        "description": "Interface InvoiceCommentCreationInterface",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-invoice-comment-creation-extension-interface"
          },
          "comment": {
            "type": "string",
            "description": "Comment."
          },
          "is_visible_on_front": {
            "type": "integer",
            "description": "Is-visible-on-storefront flag value."
          }
        },
        "required": [
          "comment",
          "is_visible_on_front"
        ]
      },
      "sales-data-invoice-comment-creation-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface"
      },
      "sales-data-invoice-creation-arguments-interface": {
        "type": "object",
        "description": "Interface for creation arguments for Invoice.",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-data-invoice-creation-arguments-extension-interface"
          }
        }
      },
      "sales-data-invoice-creation-arguments-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface"
      },
      "sales-rule-data-rule-interface": {
        "type": "object",
        "description": "Interface RuleInterface",
        "properties": {
          "rule_id": {
            "type": "integer",
            "description": "Rule id"
          },
          "name": {
            "type": "string",
            "description": "Rule name"
          },
          "store_labels": {
            "type": "array",
            "description": "Display label",
            "items": {
              "$ref": "#/components/schemas/sales-rule-data-rule-label-interface"
            }
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "website_ids": {
            "type": "array",
            "description": "A list of websites the rule applies to",
            "items": {
              "type": "integer"
            }
          },
          "customer_group_ids": {
            "type": "array",
            "description": "Ids of customer groups that the rule applies to",
            "items": {
              "type": "integer"
            }
          },
          "from_date": {
            "type": "string",
            "description": "The start date when the coupon is active"
          },
          "to_date": {
            "type": "string",
            "description": "The end date when the coupon is active"
          },
          "uses_per_customer": {
            "type": "integer",
            "description": "Number of uses per customer"
          },
          "is_active": {
            "type": "boolean",
            "description": "The coupon is active"
          },
          "condition": {
            "$ref": "#/components/schemas/sales-rule-data-condition-interface"
          },
          "action_condition": {
            "$ref": "#/components/schemas/sales-rule-data-condition-interface"
          },
          "stop_rules_processing": {
            "type": "boolean",
            "description": "To stop rule processing"
          },
          "is_advanced": {
            "type": "boolean",
            "description": "Is this field needed"
          },
          "product_ids": {
            "type": "array",
            "description": "Product ids",
            "items": {
              "type": "integer"
            }
          },
          "sort_order": {
            "type": "integer",
            "description": "Sort order"
          },
          "simple_action": {
            "type": "string",
            "description": "Simple action of the rule"
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount"
          },
          "discount_qty": {
            "type": "number",
            "description": "Maximum qty discount is applied"
          },
          "discount_step": {
            "type": "integer",
            "description": "Discount step"
          },
          "apply_to_shipping": {
            "type": "boolean",
            "description": "The rule applies to shipping"
          },
          "times_used": {
            "type": "integer",
            "description": "How many times the rule has been used"
          },
          "is_rss": {
            "type": "boolean",
            "description": "Whether the rule is in RSS"
          },
          "coupon_type": {
            "type": "string",
            "description": "Coupon type"
          },
          "use_auto_generation": {
            "type": "boolean",
            "description": "To auto generate coupon"
          },
          "uses_per_coupon": {
            "type": "integer",
            "description": "Limit of uses per coupon"
          },
          "simple_free_shipping": {
            "type": "string",
            "description": "To grant free shipping"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-rule-data-rule-extension-interface"
          }
        },
        "required": [
          "website_ids",
          "customer_group_ids",
          "uses_per_customer",
          "is_active",
          "stop_rules_processing",
          "is_advanced",
          "sort_order",
          "discount_amount",
          "discount_step",
          "apply_to_shipping",
          "times_used",
          "is_rss",
          "coupon_type",
          "use_auto_generation",
          "uses_per_coupon"
        ]
      },
      "sales-rule-data-rule-label-interface": {
        "type": "object",
        "description": "Interface RuleLabelInterface",
        "properties": {
          "store_id": {
            "type": "integer",
            "description": "StoreId"
          },
          "store_label": {
            "type": "string",
            "description": "The label for the store"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-rule-data-rule-label-extension-interface"
          }
        },
        "required": [
          "store_id",
          "store_label"
        ]
      },
      "sales-rule-data-rule-label-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleLabelInterface"
      },
      "sales-rule-data-condition-interface": {
        "type": "object",
        "description": "Interface ConditionInterface",
        "properties": {
          "condition_type": {
            "type": "string",
            "description": "Condition type"
          },
          "conditions": {
            "type": "array",
            "description": "List of conditions",
            "items": {
              "$ref": "#/components/schemas/sales-rule-data-condition-interface"
            }
          },
          "aggregator_type": {
            "type": "string",
            "description": "The aggregator type"
          },
          "operator": {
            "type": "string",
            "description": "The operator of the condition"
          },
          "attribute_name": {
            "type": "string",
            "description": "The attribute name of the condition"
          },
          "value": {
            "type": "string",
            "description": "The value of the condition"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-rule-data-condition-extension-interface"
          }
        },
        "required": [
          "condition_type",
          "operator",
          "value"
        ]
      },
      "sales-rule-data-condition-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface"
      },
      "sales-rule-data-rule-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleInterface",
        "properties": {
          "reward_points_delta": {
            "type": "integer"
          }
        }
      },
      "sales-rule-data-rule-search-result-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "items": {
            "type": "array",
            "description": "Rules.",
            "items": {
              "$ref": "#/components/schemas/sales-rule-data-rule-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-rule-data-coupon-interface": {
        "type": "object",
        "description": "Interface CouponInterface",
        "properties": {
          "coupon_id": {
            "type": "integer",
            "description": "Coupon id"
          },
          "rule_id": {
            "type": "integer",
            "description": "The id of the rule associated with the coupon"
          },
          "code": {
            "type": "string",
            "description": "Coupon code"
          },
          "usage_limit": {
            "type": "integer",
            "description": "Usage limit"
          },
          "usage_per_customer": {
            "type": "integer",
            "description": "Usage limit per customer"
          },
          "times_used": {
            "type": "integer",
            "description": "The number of times the coupon has been used"
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date"
          },
          "is_primary": {
            "type": "boolean",
            "description": "The coupon is primary coupon for the rule that it's associated with"
          },
          "created_at": {
            "type": "string",
            "description": "When the coupon is created"
          },
          "type": {
            "type": "integer",
            "description": "Of coupon"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-rule-data-coupon-extension-interface"
          }
        },
        "required": [
          "rule_id",
          "times_used",
          "is_primary"
        ]
      },
      "sales-rule-data-coupon-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponInterface"
      },
      "sales-rule-data-coupon-search-result-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "items": {
            "type": "array",
            "description": "Rules.",
            "items": {
              "$ref": "#/components/schemas/sales-rule-data-coupon-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "sales-rule-data-coupon-generation-spec-interface": {
        "type": "object",
        "description": "CouponGenerationSpecInterface",
        "properties": {
          "rule_id": {
            "type": "integer",
            "description": "The id of the rule associated with the coupon"
          },
          "format": {
            "type": "string",
            "description": "Format of generated coupon code"
          },
          "quantity": {
            "type": "integer",
            "description": "Of coupons to generate"
          },
          "length": {
            "type": "integer",
            "description": "Length of coupon code"
          },
          "prefix": {
            "type": "string",
            "description": "The prefix"
          },
          "suffix": {
            "type": "string",
            "description": "The suffix"
          },
          "delimiter_at_every": {
            "type": "integer",
            "description": "The spacing where the delimiter should exist"
          },
          "delimiter": {
            "type": "string",
            "description": "The delimiter"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/sales-rule-data-coupon-generation-spec-extension-interface"
          }
        },
        "required": [
          "rule_id",
          "format",
          "quantity",
          "length"
        ]
      },
      "sales-rule-data-coupon-generation-spec-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponGenerationSpecInterface"
      },
      "sales-rule-data-coupon-mass-delete-result-interface": {
        "type": "object",
        "description": "Coupon mass delete results interface.",
        "properties": {
          "failed_items": {
            "type": "array",
            "description": "List of failed items.",
            "items": {
              "type": "string"
            }
          },
          "missing_items": {
            "type": "array",
            "description": "List of missing items.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "failed_items",
          "missing_items"
        ]
      },
      "checkout-data-payment-details-interface": {
        "type": "object",
        "description": "Interface PaymentDetailsInterface",
        "properties": {
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/quote-data-payment-method-interface"
            }
          },
          "totals": {
            "$ref": "#/components/schemas/quote-data-totals-interface"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/checkout-data-payment-details-extension-interface"
          }
        },
        "required": [
          "payment_methods",
          "totals"
        ]
      },
      "inventory-sales-api-data-sales-channel-interface": {
        "type": "object",
        "description": "Represents sales channels (which are a linkage between stocks and websites, customer groups, etc.) Used fully qualified namespaces in annotations for proper work of WebApi request parser",
        "properties": {
          "type": {
            "type": "string",
            "description": "Sales channel type"
          },
          "code": {
            "type": "string",
            "description": "Sales channel code"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-sales-api-data-sales-channel-extension-interface"
          }
        }
      },
      "inventory-sales-api-data-sales-channel-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\SalesChannelInterface"
      },
      "inventory-export-stock-api-data-export-stock-salable-qty-search-result-interface": {
        "type": "object",
        "description": "Interface for ExportStockSalableQtySearchResult",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/framework-extensible-data-interface"
            }
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": [
          "items",
          "search_criteria",
          "total_count"
        ]
      },
      "inventory-sales-api-data-is-product-salable-result-interface": {
        "type": "object",
        "description": "Represents \"is product salable\" result interface.",
        "properties": {
          "sku": {
            "type": "string",
            "description": "Product sku from result."
          },
          "stock_id": {
            "type": "integer",
            "description": "Stock id from result."
          },
          "salable": {
            "type": "boolean",
            "description": "Is salable result."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-sales-api-data-is-product-salable-result-extension-interface"
          }
        },
        "required": [
          "sku",
          "stock_id",
          "salable"
        ]
      },
      "inventory-sales-api-data-is-product-salable-result-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\IsProductSalableResultInterface"
      },
      "inventory-sales-api-data-product-salable-result-interface": {
        "type": "object",
        "description": "Represents result of service Magento\\InventorySalesApi\\Api\\IsProductSalableForRequestedQtyInterface::execute",
        "properties": {
          "salable": {
            "type": "boolean"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inventory-sales-api-data-product-salability-error-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-sales-api-data-product-salable-result-extension-interface"
          }
        },
        "required": [
          "salable",
          "errors"
        ]
      },
      "inventory-sales-api-data-product-salability-error-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-sales-api-data-product-salability-error-extension-interface"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "inventory-sales-api-data-product-salability-error-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\ProductSalabilityErrorInterface"
      },
      "inventory-sales-api-data-product-salable-result-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\ProductSalableResultInterface"
      },
      "inventory-sales-api-data-is-product-salable-for-requested-qty-result-interface": {
        "type": "object",
        "description": "Represents \"is product salable for requested quantity\" result interface.",
        "properties": {
          "sku": {
            "type": "string",
            "description": "Product sku from result."
          },
          "stock_id": {
            "type": "integer",
            "description": "Stock id from result."
          },
          "salable": {
            "type": "boolean",
            "description": "Is salable result."
          },
          "errors": {
            "type": "array",
            "description": "Errors from result.",
            "items": {
              "$ref": "#/components/schemas/inventory-sales-api-data-product-salability-error-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-sales-api-data-is-product-salable-for-requested-qty-result-extension-interface"
          }
        },
        "required": [
          "sku",
          "stock_id",
          "salable",
          "errors"
        ]
      },
      "inventory-sales-api-data-is-product-salable-for-requested-qty-result-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\IsProductSalableForRequestedQtyResultInterface"
      },
      "inventory-in-store-pickup-sales-api-data-result-interface": {
        "type": "object",
        "description": "Operation result object that contains status of the operation.",
        "properties": {
          "successful": {
            "type": "boolean",
            "description": "Operation result successful."
          },
          "errors": {
            "type": "array",
            "description": "Error information for failed operations.",
            "items": {
              "type": "string"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-sales-api-data-result-extension-interface"
          }
        },
        "required": [
          "successful",
          "errors"
        ]
      },
      "inventory-in-store-pickup-sales-api-data-result-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventoryInStorePickupSalesApi\\Api\\Data\\ResultInterface"
      },
      "payment-services-paypal-data-payment-order-interface": {
        "type": "object",
        "description": "Interface PaymentOrderInterface",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment order id"
          },
          "mp_order_id": {
            "type": "string",
            "description": "Payment order mpOrderId"
          },
          "status": {
            "type": "string",
            "description": "Payment order status"
          },
          "amount": {
            "type": "number",
            "description": "Payment order amount"
          },
          "currency_code": {
            "type": "string",
            "description": "Payment order currency code"
          }
        },
        "required": [
          "id",
          "mp_order_id",
          "status",
          "amount",
          "currency_code"
        ]
      },
      "payment-services-paypal-data-payment-order-details-interface": {
        "type": "object",
        "description": "Interface PaymentOrderDetailsInterface",
        "properties": {
          "payment_source_details": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-source-details-interface"
          },
          "id": {
            "type": "string",
            "description": "Payment order id"
          },
          "mp_order_id": {
            "type": "string",
            "description": "Payment order mpOrderId"
          },
          "status": {
            "type": "string",
            "description": "Payment order status"
          },
          "amount": {
            "type": "number",
            "description": "Payment order amount"
          },
          "currency_code": {
            "type": "string",
            "description": "Payment order currency code"
          }
        },
        "required": [
          "payment_source_details",
          "id",
          "mp_order_id",
          "status",
          "amount",
          "currency_code"
        ]
      }
    }
  }
}